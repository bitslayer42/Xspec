Makefile:
Xspec: Xspec.o XspecMath.o XspecConv.o
	gcc -o Xspec -I/usr/include -I/usr/X11R6/LessTif/Motif2.1/include -L/usr/lib/gcc-lib/i386-redhat-linux/2.96  -L/usr/X11R6/LessTif/Motif2.1/lib -L/usr/X11R6/lib -lXm -lXt -lX11 -lm Xspec.o XspecMath.o XspecConv.o

Xspec.o: Xspec.c XspecMath.h XspecConv.h
	gcc -I/usr/X11R6/LessTif/Motif2.1/include -L/usr/X11R6/LessTif/Motif2.1/lib -lXm -lXt -lX11 -c Xspec.c

XspecMath.o: XspecMath.c
	gcc -I/usr/include -I/usr/X11R6/LessTif/Motif2.1/include -L/usr/X11R6/LessTif/Motif2.1/lib -lXm -lXt -lX11 -c XspecMath.c

XspecConv.o: XspecConv.c
	gcc -I/usr/X11R6/LessTif/Motif2.1/include -L/usr/X11R6/LessTif/Motif2.1/lib -lXm -lXt -lX11 -c XspecConv.c
-----------------
Xspec.c
/*Xspec*/
/*Motif Curved Perspective Program*/
/*Jon Bierce-Wilson*/

#include <Xm/Xm.h>
#include <Xm/Label.h>
#include <Xm/PushB.h>
#include <Xm/MainW.h>
#include <Xm/RowColumn.h>
#include <Xm/ToggleB.h>
#include <Xm/MessageB.h>
#include <Xm/BulletinB.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <Xm/FileSB.h>
#define OK     1
#define CANCEL 2
#include "XspecConv.h"
#include "XspecMath.h"
#define UNSAVED 0
#define SAVED   1
#define CHANGED 2
int saveState = UNSAVED;
#define NOACTION   0
#define EXITACTION 1
#define OPENACTION 2
int actionAfterSave = 0;
#define Xchoice 0
#define Ychoice 1
#define Zchoice 2
int XYorZ;

/*void translateDialogCB(Widget , XtPointer , XtPointer );*/
void whichAxisCB(Widget , int , XtPointer );
XmStringCharSet char_set = XmSTRING_DEFAULT_CHARSET;
Display* global_display;
Window   global_window;
GC       global_gc;
Region   global_region = (Region) NULL;
 Widget parent;
 Widget mainwindow;
 Widget menubar;
 Widget filemenu, editmenu, optionsmenu;
 Widget openchoice, newchoice, savechoice, appendchoice, exitchoice;
 Widget boxeschoice, tabletchoice;
 Widget rotatechoice, translatechoice, scalechoice;
 Widget constantviewanglechoice, autoredrawchoice;
 Widget drawingarea;
 Widget dialog, row;
 Widget openDialog;
 Widget saveDialog;
 Widget cantOpenDialog;
 Widget saveQuestionDialog;
 Widget cantAppendDialog;
 Widget outOfMemoryDialog;
 Widget appendDialog;
 Widget eyeX, eyeY, eyeZ;
 Widget viewX, viewY, viewZ;
 Widget widthget;
 Widget redraw;
 Widget rotateDialog;
 Widget translateDialog;
 Widget scaleDialog;
 Widget rowcol;
 Widget changeValue;
 Widget radiorow;
 Widget okButton;
 Widget cancelButton;
 Widget radio_box;
 Widget radio_text;
 Widget Xbutton;
 Widget Ybutton;
 Widget Zbutton;

 Boolean autoRedrawMode = TRUE;
 Boolean constantViewAngle = FALSE;
 double transformAmount;

const int WINDOWSIZE=800;
double width;    /*these are the globals that can be changed */
point3d eye;   /*from the control window */
point3d view;
double widthD;  /*widthD is in degrees, width is in radians */

vector upV;

line  *lines;
point3d *verts3d;
point2d *screenVerts;
angles *viewAngles;

line  *templines;
point3d *tempverts3d;

int numlines = 0;
int numpoints = 0;



/*******************************************/

void DrawTest(Display* display, Window window, GC gc)
{

 int k;

 width = widthD/180*3.14;
 for(k=0;k<numpoints;k++)
   {
    viewAngles[k] = findAngles(verts3d[k]);
    screenVerts[k] = findScreenPoints(viewAngles[k]);
   }
 for(k=0;k<numlines;k++)
   {
    XDrawLine(display, window, gc, screenVerts[lines[k].from].x,
                                   screenVerts[lines[k].from].y,
                                   screenVerts[lines[k].to].x,
                                   screenVerts[lines[k].to].y);
  }
}

/*****************************************/

void HandleExpose(XExposeEvent* event)
{
 XRectangle rectangle;
 if (global_region == (Region) NULL)
  {
   global_region = XCreateRegion();
  }
 UnionExposeWithRegion(event, global_region);
 if (event->count == 0)
  {
   ClipToRegion(global_display, global_gc, global_region);
   XDestroyRegion(global_region);
   global_region = (Region) NULL;
   DrawTest(global_display, global_window, global_gc);
   XSetClipMask(global_display, global_gc, (Pixmap) None);
  }
}

/****************************************/

void drawCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XmDrawingAreaCallbackStruct*  ptr;
 ptr = (XmDrawingAreaCallbackStruct*) call_data;
 if (ptr->reason == XmCR_EXPOSE)
  {
   HandleExpose((XExposeEvent*) ptr->event);
  }
}


/*******************************************/

static void sliderCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XmScaleCallbackStruct* ptr;
 double* value;
 ptr = (XmScaleCallbackStruct*) call_data;
  value = (double*) client_data;
  if (value != (double*) NULL)
   {
    *value = ptr->value;
   }
 XtSetSensitive(widget, False);
 XmUpdateDisplay(widget);
 if(autoRedrawMode)
   {
     XClearWindow(global_display, global_window);
     DrawTest(global_display, global_window, global_gc);
   }
 XFlush(global_display);
 XtSetSensitive(widget, True);
}

/****************************************/

void redrawCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtSetSensitive(widget, False);
 XmUpdateDisplay(widget);
 XClearWindow(global_display, global_window);
 DrawTest(global_display, global_window, global_gc);
 XFlush(global_display);
 XtSetSensitive(widget, True);
}

/******************************************/

Widget CreateControlWindow(Widget parent, char* app_name, char* app_class)
{
 Arg args[20];
 int n;

 dialog = CreateShell(parent, app_name, app_class, "Control Window");
 n = 0;
 row = XmCreateRowColumn(dialog, "row", args, n);

 eyeX = CreateHSlider(row, "eyeX", -20, 20, eye.x, "Eye Position, X",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &(eye.x));

 eyeY  = CreateHSlider(row, "eyeY", -20, 20, eye.y, "Eye Position, Y",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &(eye.y));

 eyeZ  = CreateHSlider(row, "eyeZ", -20, 20, eye.z,"Eye Position, Z",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &(eye.z));

 viewX  = CreateHSlider(row, "viewX", -20, 20, view.x, "Center of View, X",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &view.x);

 viewY  = CreateHSlider(row, "viewY", -20, 20, view.y, "Center of View, Y",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &view.y);

 viewZ  = CreateHSlider(row, "viewZ", -20, 20, view.z,"Center of View, Z",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &view.z);

 widthget  = CreateHSlider(row, "widthget", 1, 360, widthD, "Width of View",
                         (XtCallbackProc) sliderCB,
                         (XtPointer) &widthD);

 redraw = (Widget) CreatePushButton(row, "redraw", (XtCallbackProc) redrawCB,
                           (XtPointer) NULL);
 XtManageChild(row);
 XtRealizeWidget(dialog);
  return dialog;
}

/*************************************************************/

Widget CreateTransformDialog(Widget parent,
                             char* name,
                             char* sliderText,
			     char* radioText,
                             XtCallbackProc callback,
			     int min,
                             int max)
{
  Widget widget;
  Arg  args[20];
  int  n;

  n = 0;
  XtSetArg(args[n],XmNautoUnmanage,False); n++;
  widget = XmCreateBulletinBoardDialog(parent, name,args,n);
  n = 0;
  XtSetArg(args[n],XmNx,10); n++;
  XtSetArg(args[n],XmNy,10); n++;
  rowcol = XmCreateRowColumn(widget,"rowcol",args,n);
  XtManageChild(rowcol);
  changeValue = CreateHSlider(rowcol,"changeValue",min,max,(max-min)/2,sliderText,
			      (XtCallbackProc) sliderCB, (XtPointer) &transformAmount);
  n = 0;
  radiorow = XmCreateRowColumn(rowcol,"radiorow",args,n);
  XtManageChild(radiorow);
  n = 0;
  radio_box = XmCreateRadioBox(radiorow,"radio_box",args,n);
  XtManageChild(radio_box);
  Xbutton = CreateToggleButton(radio_box,"Xbutton",whichAxisCB,Xchoice);
  Ybutton = CreateToggleButton(radio_box,"Ybutton",whichAxisCB,Ychoice);
  Zbutton = CreateToggleButton(radio_box,"Zbutton",whichAxisCB,Zchoice);
  n = 0;
  XtSetArg(args[n],XmNlabelString,XmStringCreateLtoR(radioText,char_set)); n++;
  radio_text = XmCreateLabel(radiorow,"radio_text",args,n);
  XtManageChild(radio_text);
  okButton = CreatePushButton(rowcol,"okButton",callback,(XtPointer)OK);
  cancelButton = CreatePushButton(rowcol,"cancelButton",callback,(XtPointer)CANCEL);
  return widget;
}
/*************************************************************/
void openCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 if (numpoints!=0 && saveState!= SAVED)
   {
     actionAfterSave = OPENACTION;
     XtManageChild(saveQuestionDialog);
   }
 else
   {
     XtManageChild(openDialog);
   }
}
/*************************************************************/
void saveCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtManageChild(saveDialog);
}
/*************************************************************/
void appendCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  if (numpoints == 0)
   XtManageChild(cantAppendDialog);
 else
   XtManageChild(appendDialog);
}
/******************************************/
void exitCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 if (numpoints!=0 && saveState!= SAVED)
   {
     actionAfterSave = EXITACTION;
     XtManageChild(saveQuestionDialog);
   }
 else
   {
     exit(0);
   }
}
/*************************************************************/
void boxesCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  /*XtManageChild(boxesDialog);*/
}
/*************************************************************/
void tabletCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  /*XtManageChild(tabletDialog);*/
}
/*************************************************************/
void rotateCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtManageChild(rotateDialog);
}
/*************************************************************/
void translateCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtManageChild(translateDialog);
}
/*************************************************************/
void scaleCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtManageChild(scaleDialog);
}

/*************************************************************/
void openDialogCB(Widget widget, int client_data,
                  XmSelectionBoxCallbackStruct *call_data)
{
 char *filename;
 FILE *fileIn;
 register int i;
 char *cookie;

 switch(client_data)
   {
   case OK:
     XmStringGetLtoR(call_data->value, char_set, &filename);
     fileIn = fopen(filename, "r");
     if (!fileIn) { XtManageChild(cantOpenDialog); break;}
/*     (void)fgets(cookie,12,fileIn);
     cookie[strlen(cookie)-1] = '\0';
     if(strcmp(cookie,"XspecFile")) {printf("No cookie"); exit(1);}
*/
     (void)fscanf(fileIn, " %d", &numpoints);
     tempverts3d= calloc(numpoints, sizeof(point3d));
     if (!tempverts3d)
       {
	 XtManageChild(outOfMemoryDialog);
	 break;
      }
     screenVerts= calloc(numpoints, sizeof(point2d));
     if (!screenVerts)
       {
	 XtManageChild(outOfMemoryDialog);
	 break;
      }
     viewAngles= calloc(numpoints, sizeof(angles));
     if (!viewAngles)
       {
	 XtManageChild(outOfMemoryDialog);
	 break;
      }

     for (i=0;i<numpoints;i++)
       {
	 (void)fscanf(fileIn, " %lf %lf %lf", &tempverts3d[i].x,
                                              &tempverts3d[i].y,
                                              &tempverts3d[i].z);
       }
     verts3d = tempverts3d;
     (void)fscanf(fileIn," %d", &numlines);
     templines = calloc(numlines, sizeof(line));
     if (!templines)
       {
	 XtManageChild(outOfMemoryDialog);
	 break;
      }

     for (i=0;i<numlines;i++)
       {
	 (void)fscanf(fileIn," %d %d", &templines[i].from, &templines[i].to);
       }
     lines = templines;
     fclose(fileIn);
     saveState = SAVED;
     break;
   case CANCEL:
     break;
   }
 XtUnmanageChild(openDialog);
 actionAfterSave = NOACTION;
 XClearArea(global_display,global_window,0,0,0,0,FALSE);
 DrawTest(global_display, global_window, global_gc);
}

/*************************************************************/
void saveDialogCB(Widget widget, int client_data,
                  XmSelectionBoxCallbackStruct *call_data)
{
 char *filename;
 FILE *fileOut;
 register int i;
 char *cookie;

 switch(client_data)
   {
   case OK:
     XmStringGetLtoR(call_data->value, char_set, &filename);
     fileOut = fopen(filename, "w");
     if(!fileOut) { XtManageChild(cantOpenDialog); break;}
     (void) fprintf(fileOut, " %d\n", numpoints);
     for (i=0;i<numpoints;i++)
       {
	 (void) fprintf(fileOut, " %lf %lf %lf\n", verts3d[i].x, verts3d[i].y, verts3d[i].z);
       }
     (void) fprintf(fileOut," %d\n", numlines);
     for (i=0;i<numlines;i++)
       {
	 fprintf(fileOut," %d %d\n", lines[i].from, lines[i].to);
       }
     fclose(fileOut);
     saveState = SAVED;
     break;
   case CANCEL:
     break;
   }
 XtUnmanageChild(saveDialog);
 if (actionAfterSave == EXITACTION) {exit(0);}
 else if (actionAfterSave == OPENACTION)
   {
     XtManageChild(openDialog);
   }
}
/*************************************************************/
void appendDialogCB(Widget widget, int client_data,
                  XmSelectionBoxCallbackStruct *call_data)
{
 char *filename;
 FILE *fileIn;
 register int i;
 char *cookie;
 int numpoints2;
 int numlines2;

 switch(client_data)
   {
   case OK:
	 XmStringGetLtoR(call_data->value, char_set, &filename);
	 fileIn = fopen(filename, "r");
	 if (!fileIn) { XtManageChild(cantOpenDialog); break;}

	 /*allocate verts3d*/
	 verts3d= calloc(numpoints, sizeof(point3d));
	 if (!verts3d)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }
	 for(i=0;i<numpoints;i++)
	   {
	     verts3d[i].x = tempverts3d[i].x;
	     verts3d[i].y = tempverts3d[i].y;
	     verts3d[i].z = tempverts3d[i].z;
	   }
	 free(tempverts3d);
         (void) fscanf(fileIn, " %d", &numpoints2);
	 tempverts3d = calloc((numpoints+numpoints2), sizeof(point3d));
	 if (!tempverts3d)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }
	 for (i=0;i<numpoints2;i++)
	   {
	     (void) fscanf(fileIn, " %lf %lf %lf",   &tempverts3d[i].x,
                                  &tempverts3d[i].y, &tempverts3d[i].z);
	   }
	 for(i=0;i<numpoints;i++)
	   {
	     tempverts3d[numpoints2+i].x = verts3d[i].x;
	     tempverts3d[numpoints2+i].y = verts3d[i].y;
	     tempverts3d[numpoints2+i].z = verts3d[i].z;
	   }
	 free(verts3d);
	 verts3d = tempverts3d;
	 numpoints += numpoints2;

	 /*allocate screenVerts and viewAngles*/
	 free(screenVerts);
	 screenVerts= calloc(numpoints, sizeof(point2d));
	 if (!screenVerts)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }

	 free(viewAngles);
	 viewAngles= calloc(numpoints, sizeof(angles));
	 if (!viewAngles)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }

	 /*allocate lines*/
	 lines= calloc(numlines, sizeof(line));
	 if (!lines)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }

	 for(i=0;i<numlines;i++)
	   {
	     lines[i].from = templines[i].from;
	     lines[i].to = templines[i].to;
	   }
	 free(templines);
         (void) fscanf(fileIn, " %d", &numlines2);
	 templines = calloc((numlines+numlines2), sizeof(line));
	 if(!templines)
	   {
	     XtManageChild(outOfMemoryDialog);
	     break;
	   }

	 for (i=0;i<numlines2;i++)
	   {
	     (void) fscanf(fileIn," %d %d", &templines[i].from, &templines[i].to);
	   }
	 for(i=0;i<numlines;i++)
	   {
	     templines[numlines2+i].from = lines[i].from + numpoints2;
	     templines[numlines2+i].to = lines[i].to + numpoints2;
	   }
	 free(lines);
	 lines = templines;
	 numlines += numlines2;


	 fclose(fileIn);
	 saveState = UNSAVED;
     break;
   case CANCEL:
     break;
   }
 XtUnmanageChild(appendDialog);
 DrawTest(global_display, global_window, global_gc);

}
/*************************************************************/

void whichAxisCB(Widget widget, int client_data, XtPointer call_data)
{
  Boolean set;
  Arg args[10];
  int n;

  n = 0;
  XtSetArg(args[n],XmNset,&set); n++;
  XtGetValues (widget,args,n);
  if(set)
     XYorZ = client_data;
}
/*************************************************************/

void scaleDialogCB(Widget widget, int client_data, XtPointer call_data)
{
  int k;
  double transform;

    switch (client_data)
      {
      case OK:
	transform = transformAmount/100;
        if(XYorZ == Xchoice)
          for(k=0;k<numpoints;k++)
            verts3d[k].x *= transform;
        else if(XYorZ == Ychoice)
          for(k=0;k<numpoints;k++)
            verts3d[k].y *= transform;
        else if(XYorZ == Zchoice)
          for(k=0;k<numpoints;k++)
            verts3d[k].z *= transform;
	break;
      case CANCEL:
        break;
      }
    XtUnmanageChild(scaleDialog);
    XClearArea(global_display,global_window,0,0,0,0,FALSE);
    DrawTest(global_display, global_window, global_gc);
    saveState = CHANGED;
}

/*************************************************************/

void translateDialogCB(Widget widget, int client_data, XtPointer call_data)
{
  int k;

    switch (client_data)
     {
     case OK:
	if(XYorZ == Xchoice)
	  for(k=0;k<numpoints;k++)
	    verts3d[k].x += transformAmount;
	else if(XYorZ == Ychoice)
	  for(k=0;k<numpoints;k++)
	    verts3d[k].y += transformAmount;
	else if(XYorZ == Zchoice)
	  for(k=0;k<numpoints;k++)
	    verts3d[k].z += transformAmount;
	break;
      case CANCEL:
        break;
     }
    XtUnmanageChild(translateDialog);
    XClearArea(global_display,global_window,0,0,0,0,FALSE);
    DrawTest(global_display, global_window, global_gc);
    saveState = CHANGED;
}

/*************************************************************/

void rotateDialogCB(Widget widget, int client_data, XtPointer call_data)
{
  int k;
  double angleRad;
  double temp;
    switch (client_data)
      {
      case OK:
	angleRad = transformAmount*3.14/180;
    if(XYorZ == Xchoice)
      for(k=0;k<numpoints;k++)
	{
        temp = verts3d[k].y*cos(angleRad) - verts3d[k].z*sin(angleRad);
        verts3d[k].z = verts3d[k].y*sin(angleRad) + verts3d[k].z*cos(angleRad);
	verts3d[k].y = temp;
	}
    else if(XYorZ == Ychoice)
      for(k=0;k<numpoints;k++)
	{
        temp = verts3d[k].x*cos(angleRad) + verts3d[k].z*sin(angleRad);
        verts3d[k].z = verts3d[k].x*-sin(angleRad) + verts3d[k].z*cos(angleRad);
	verts3d[k].x = temp;
}
    else if(XYorZ == Zchoice)
      for(k=0;k<numpoints;k++)
	{
        temp = verts3d[k].x*cos(angleRad) - verts3d[k].y*sin(angleRad);
        verts3d[k].y = verts3d[k].x*sin(angleRad) + verts3d[k].y*cos(angleRad);
	verts3d[k].x = temp;
	}
	break;
      case CANCEL:
        break;
      }
    XtUnmanageChild(rotateDialog);
    XClearArea(global_display,global_window,0,0,0,0,FALSE);
    DrawTest(global_display, global_window, global_gc);
    saveState = CHANGED;
}

/*************************************************************/

void saveQuestionDialogCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  switch ((int) client_data)
    {
    case OK:
      XtUnmanageChild(saveQuestionDialog);
      XtManageChild(saveDialog);
      break;
    case CANCEL:
      XtUnmanageChild(saveQuestionDialog);
      if(actionAfterSave == EXITACTION)
	exit(0);
      else if(actionAfterSave == OPENACTION)
	XtManageChild(openDialog);
      break;
    }
}

/************************************************************/

void outOfMemoryDialogCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtUnmanageChild(outOfMemoryDialog);
}

/************************************************************/

void cantOpenDialogCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtUnmanageChild(cantOpenDialog);
}

/************************************************************/

 void cantAppendDialogCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XtUnmanageChild(cantAppendDialog);
}

/************************************************************/

 void autoRedrawCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  Boolean set;
  Arg args[20];
  int n;

  n = 0;
  XtSetArg(args[n],XmNset,&set); n++;
  XtGetValues(widget,args,n);
  if(set)
    autoRedrawMode = TRUE;
  else
    autoRedrawMode = FALSE;
}
/************************************************************/

 void constantViewAngleCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
  Boolean set;
  Arg args[20];
  int n;

  n = 0;
  XtSetArg(args[n],XmNset,&set); n++;
  XtGetValues(widget,args,n);
  if(set)
    constantViewAngle = TRUE;
  else
    constantViewAngle = FALSE;
}
/************************************************************/
int main(int argc, char** argv)
{
 XtAppContext app_context;
 Arg    args[20];
 int    n;
 int screen;


String fallback_resources []=
  {
    "*background:       lightgrey",
    "*drawingarea.background: white",
    "*fontlist: lucidasans-12",
    "*filemenu.labelString: File",
    "*filemenu.mnemonic:  F",
    "*editmenu.labelString: Edit",
    "*editmenu.mnemonic:  E",
    "*openchoice.labelString:  Open",
    "*openchoice.mnemonic:  O",
    "*newchoice.labelString:  New",
    "*newchoice.mnemonic:  N",
    "*savechoice.labelString:  Save",
    "*savechoice.mnemonic:  S",
    "*appendchoice.labelString:  Append",
    "*appendchoice.mnemonic:  A",
    "*exitchoice.labelString:  Exit",
    "*exitchoice.mnemonic:  x",
    "*boxeschoice.labelString: Boxes",
    "*boxeschoice.mnemonic:  B",
    "*tabletchoice.labelString:  Graphic Tablet",
    "*tabletchoice.mnemonic:  G",
    "*rotatechoice.labelString:  Rotate",
    "*rotatechoice.mnemonic:  R",
    "*translatechoice.labelString:  Translate",
    "*translatechoice.mnemonic:  T",
    "*scalechoice.labelString:  Scale",
    "*scalechoice.mnemonic:  c",
    "*optionsmenu.labelString:  Options",
    "*optionsmenu.mnemonic:  p",
    "*autoredrawchoice.labelString:  Auto Redraw Mode",
    "*autoredrawchoice.mnemonic:  u",
    "*constantviewanglechoice.labelString:  Constant Viewangle Mode",
    "*choice.mnemonic:  V",
    NULL
  };

 upV.x = 0;
 upV.y = 1;
 upV.z = 0;
 eye.x = 2;
 eye.y = 1;
 eye.z = -6;
 view.x =5;
 view.y =5;
 view.z =0;
  widthD = 180;

 n = 0;
 XtSetArg(args[n], XmNwinGravity, NorthEastGravity); n++;
 XtSetArg(args[n], XmNmappedWhenManaged, False); n++;
 XtSetArg(args[n], XmNallowResize, False); n++;
 XtSetArg(args[n], XmNwidth, WINDOWSIZE); n++;
 XtSetArg(args[n], XmNheight, WINDOWSIZE); n++;
 XtSetArg(args[n], XmNtitle, "Xspec Main Window"); n++;
 parent = XtAppInitialize(&app_context, "ProX", (XrmOptionDescList) NULL,
                          0, &argc, argv, fallback_resources, args, n);
 n = 0;
 XtSetArg(args[n], XmNmappedWhenManaged, True); n++;
 mainwindow = XmCreateMainWindow(parent, "main", args, n);
 n = 0;
 menubar = XmCreateMenuBar(mainwindow, "menubar", args, n);
 XtManageChild(menubar);
 filemenu = CreateMenu(menubar, "filemenu");
 editmenu = CreateMenu(menubar, "editmenu");
 optionsmenu = CreateMenu(menubar, "optionsmenu");
 openchoice = CreateMenuChoice(filemenu, "openchoice", (XtCallbackProc) openCB,
                              (XtPointer) NULL);
 newchoice = CreateMenu(filemenu, "newchoice");
 savechoice = CreateMenuChoice(filemenu, "savechoice", (XtCallbackProc) saveCB,
                              (XtPointer) NULL);
 appendchoice = CreateMenuChoice(filemenu, "appendchoice", (XtCallbackProc) appendCB,
                              (XtPointer) NULL);
 exitchoice = CreateMenuChoice(filemenu, "exitchoice", (XtCallbackProc) exitCB,
                              (XtPointer) NULL);
 boxeschoice = CreateMenuChoice(newchoice, "boxeschoice", (XtCallbackProc) boxesCB,
                              (XtPointer) NULL);
 tabletchoice = CreateMenuChoice(newchoice, "tabletchoice", (XtCallbackProc) tabletCB,
                              (XtPointer) NULL);
 rotatechoice = CreateMenuChoice(editmenu, "rotatechoice", (XtCallbackProc) rotateCB,
                              (XtPointer) NULL);
 translatechoice = CreateMenuChoice(editmenu, "translatechoice", (XtCallbackProc) translateCB,
                              (XtPointer) NULL);
 scalechoice = CreateMenuChoice(editmenu, "scalechoice", (XtCallbackProc) scaleCB,
                              (XtPointer) NULL);
 autoredrawchoice = CreateToggleButton(optionsmenu, "autoredrawchoice",
				       (XtCallbackProc) autoRedrawCB,
				       NULL);
 constantviewanglechoice = CreateToggleButton(optionsmenu, "constantviewanglechoice",
					      (XtCallbackProc) constantViewAngleCB,
					      NULL);
 n = 0;
 XtSetArg(args[n],XmNvisibleWhenOff,TRUE);
 XtSetArg(args[n],XmNset,autoRedrawMode);
 XtSetValues(autoredrawchoice,args,n);
 n = 0;
 XtSetArg(args[n],XmNvisibleWhenOff,TRUE);
 XtSetArg(args[n],XmNset,constantViewAngle);
 XtSetValues(constantviewanglechoice,args,n);


 drawingarea = CreateDrawingArea(mainwindow, "drawingarea", 640, 480,
                                (XtCallbackProc) drawCB, (XtPointer) NULL);

 /*create the dialogs*/
 dialog = CreateControlWindow(parent, argv[0], "ProX");
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: OPEN",char_set)); n++;
  XtSetArg(args[n],XmNpattern,XmStringCreateLtoR("*.xsp",char_set));  n++;
  XtSetArg(args[n],XmNdirectory,XmStringCreateLtoR("~/motif",char_set));  n++;
 openDialog = XmCreateFileSelectionDialog(parent, "openDialog", args, n);
  XtAddCallback(openDialog, XmNokCallback, openDialogCB, OK);
  XtAddCallback(openDialog, XmNcancelCallback, openDialogCB, CANCEL);
  XtUnmanageChild(XmSelectionBoxGetChild(openDialog, XmDIALOG_HELP_BUTTON));
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: SAVE",char_set)); n++;
  XtSetArg(args[n],XmNpattern,XmStringCreateLtoR("*.xsp",char_set));  n++;
  XtSetArg(args[n],XmNdirectory,XmStringCreateLtoR("~/motif",char_set));  n++;
 saveDialog = XmCreateFileSelectionDialog(parent, "saveDialog", args, n);
  XtAddCallback(saveDialog, XmNokCallback, saveDialogCB, OK);
  XtAddCallback(saveDialog, XmNcancelCallback, saveDialogCB, CANCEL);
  XtUnmanageChild(XmSelectionBoxGetChild(saveDialog, XmDIALOG_HELP_BUTTON));
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: APPEND",char_set)); n++;
  XtSetArg(args[n],XmNpattern,XmStringCreateLtoR("*.xsp",char_set));  n++;
  XtSetArg(args[n],XmNdirectory,XmStringCreateLtoR("~/motif",char_set));  n++;
 appendDialog = XmCreateFileSelectionDialog(parent, "appendDialog", args, n);
  XtAddCallback(appendDialog, XmNokCallback, appendDialogCB, OK);
  XtAddCallback(appendDialog, XmNcancelCallback, appendDialogCB, CANCEL);
  XtUnmanageChild(XmSelectionBoxGetChild(appendDialog, XmDIALOG_HELP_BUTTON));
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: ?",char_set)); n++;
  XtSetArg(args[n],XmNcancelLabelString,XmStringCreateLtoR("No",char_set));  n++;
  XtSetArg(args[n],XmNokLabelString,XmStringCreateLtoR("Yes",char_set));  n++;
  XtSetArg(args[n],XmNmessageString,XmStringCreateLtoR("Save current shape?",char_set));  n++;
 saveQuestionDialog = XmCreateMessageDialog(parent, "saveQuestionDialog", args, n);
  XtAddCallback(saveQuestionDialog, XmNokCallback, saveQuestionDialogCB, OK);
  XtAddCallback(saveQuestionDialog, XmNcancelCallback, saveQuestionDialogCB, CANCEL);
  XtUnmanageChild(XmMessageBoxGetChild(saveQuestionDialog, XmDIALOG_HELP_BUTTON));
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: !",char_set)); n++;
  XtSetArg(args[n],XmNmessageString,XmStringCreateLtoR("Unable to allocate memory",char_set));  n++;
 outOfMemoryDialog = XmCreateMessageDialog(parent, "outOfMemoryDialog", args, n);
  XtAddCallback(outOfMemoryDialog, XmNokCallback, outOfMemoryDialogCB, OK);
  XtUnmanageChild(XmMessageBoxGetChild(outOfMemoryDialog, XmDIALOG_HELP_BUTTON));
  XtUnmanageChild(XmMessageBoxGetChild(outOfMemoryDialog, XmDIALOG_CANCEL_BUTTON));
 n = 0;
  XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: !",char_set)); n++;
  XtSetArg(args[n],XmNmessageString,XmStringCreateLtoR("Unable to open file",char_set));  n++;
 cantOpenDialog = XmCreateMessageDialog(parent, "cantOpenDialog", args, n);
  XtAddCallback(cantOpenDialog, XmNokCallback, cantOpenDialogCB, OK);
  XtUnmanageChild(XmMessageBoxGetChild(cantOpenDialog, XmDIALOG_HELP_BUTTON));
  XtUnmanageChild(XmMessageBoxGetChild(cantOpenDialog, XmDIALOG_CANCEL_BUTTON));
  n = 0;
   XtSetArg(args[n], XmNdialogTitle, XmStringCreateLtoR("Xspec: !",char_set)); n++;
   XtSetArg(args[n],XmNmessageString,XmStringCreateLtoR("No open file to append to, use OPEN",
                                                        char_set));  n++;
  cantAppendDialog = XmCreateMessageDialog(parent, "cantAppendDialog", args, n);
   XtAddCallback(cantAppendDialog, XmNokCallback, cantAppendDialogCB, OK);
   XtUnmanageChild(XmMessageBoxGetChild(cantAppendDialog, XmDIALOG_HELP_BUTTON));
   XtUnmanageChild(XmMessageBoxGetChild(cantAppendDialog, XmDIALOG_CANCEL_BUTTON));

  scaleDialog = CreateTransformDialog(parent,"scaleDialog","Scale percent",
				      "along which axis?",
				      scaleDialogCB,1,500);

  rotateDialog = CreateTransformDialog(parent,"rotateDialog","Rotation angle (degrees)",
				       "around which axis?",
				       rotateDialogCB,-180,180);
  translateDialog = CreateTransformDialog(parent,"translateDialog","Translation distance",
					  "along which axis?",
					  translateDialogCB,-20,20);


 XmMainWindowSetAreas(mainwindow, menubar, (Widget) NULL,
                      (Widget) NULL, (Widget) NULL, drawingarea);
 XtManageChild(mainwindow);
 XtRealizeWidget(parent);
 global_display = XtDisplay(drawingarea);
 global_window = XtWindow(drawingarea);
 screen = DefaultScreen(global_display);
 global_gc = XCreateGC(global_display, global_window, 0L, (XGCValues*) NULL);
 XSetForeground(global_display, global_gc,
               BlackPixel(global_display, screen));
 XtMapWidget(parent);
 XtAppMainLoop(app_context);
 return 0;
}

-------------------------------
XspecConv.c
/********************************/
/* XspecConv.c */
/* convenience functions for Xspec, a motif curved */
/* perspective drawing program */
/* Jon Bierce-Wilson */


#include <Xm/Xm.h>
#include "XspecConv.h"
#include <Xm/CascadeB.h>
#include <Xm/PushB.h>
#include <Xm/ToggleB.h>
#include <Xm/RowColumn.h>
#include <Xm/DrawingA.h>
#include <X11/Shell.h>
#include <Xm/Scale.h>
extern XmStringCharSet char_set;

/********************************/

Widget CreateMenu(Widget parent, char* name)
{
 Widget cascade;
 Widget menuwidget;
 Arg args[20];
 int n;

 n = 0;
 menuwidget = XmCreatePulldownMenu(parent, name, args, n);
 n = 0;
 XtSetArg(args[n], XmNsubMenuId, menuwidget); n++;
 cascade = XmCreateCascadeButton(parent, name, args, n);
 XtManageChild(cascade);
 return menuwidget;
}

/*****************************************/
Widget CreateToggleButton(Widget parent, char* name,
                        XtCallbackProc callback,
                        int client_data)

{
 Widget button;
 Arg args[20];
 int n;

 n = 0;
 button = XmCreateToggleButton(parent, name, args, n);
 XtManageChild(button);
 XtAddCallback(button, XmNvalueChangedCallback, callback, client_data);
 return button;
}

/*****************************************/
Widget CreatePushButton(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)

{
 Widget button;
 Arg args[20];
 int n;

 n = 0;
 button = XmCreatePushButton(parent, name, args, n);
 XtManageChild(button);
 XtAddCallback(button, XmNactivateCallback, callback, client_data);
 return button;
}
/******************************************/

Widget CreateMenuChoice(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)

{
 return CreatePushButton(parent, name, callback, client_data);
}
/**********************************************/

Widget CreateDrawingArea(Widget parent, char* name, int width, int height,
                         XtCallbackProc callback, XtPointer client_data)
{
 Widget widget;
 Arg args[20];
 int n;

 n = 0;
 XtSetArg(args[n], XmNwidth, width); n++;
 XtSetArg(args[n], XmNheight, height); n++;
 XtSetArg(args[n], XmNallowResize, True); n++;
 widget = XmCreateDrawingArea(parent, name, args, n);
 XtManageChild(widget);
 XtAddCallback(widget, XmNresizeCallback, callback, client_data);
 XtAddCallback(widget, XmNinputCallback, callback, client_data);
 XtAddCallback(widget, XmNexposeCallback, callback, client_data);
 return widget;
}

/*****************************************************/

void UnionExposeWithRegion(XExposeEvent* event, Region region)
{
 XRectangle rectangle;
 rectangle.x = event->x;
 rectangle.y = event->y;
 rectangle.width = event->width;
 rectangle.height = event->height;
 XUnionRectWithRegion(&rectangle, region, region);
}

/*********************************************************/

void ClipToRegion(Display* display, GC gc, Region region)
{
 XRectangle rectangle;
#define CLIP_REGIONS
#ifdef CLIP_REGIONS
 XSetRegion(display, gc, region);
#else
 XClipBox(region, &rectangle);
 XSetClipRectangles(display, gc, 0, 0, &rectangle, 1, YXBanded);
#endif
}

/********************************************************/

Widget CreateShell(Widget parent, char* app_name, char* app_class, char* title)
{
 Widget widget;
 Arg args[20];
 int n;

 n = 0;
 XtSetArg(args[n], XmNwinGravity, NorthWestGravity); n++;
 XtSetArg(args[n], XmNtitle, title); n++;
 XtSetArg(args[n], XmNminWidth, 200 ); n++;
 XtSetArg(args[n], XmNtransientFor, parent); n++;
 XtSetArg(args[n], XmNallowShellResize, True); n++;
 widget = XtAppCreateShell(app_name, app_class, topLevelShellWidgetClass,
                           XtDisplay(parent), args, n);
 return widget;
}

/*********************************************************/

Widget CreateHSlider(Widget parent, char* name, int minimum, int maximum,
                     int init, char* title, XtCallbackProc callback,
                     XtPointer client_data)

{
 Widget widget;
 Arg args[20];
 int n;
 XmString xmstring;

 n = 0;
 XtSetArg(args[n], XmNorientation, XmHORIZONTAL); n++;
 XtSetArg(args[n], XmNprocessingDirection, XmMAX_ON_RIGHT); n++;
 XtSetArg(args[n], XmNmaximum, maximum); n++;
 XtSetArg(args[n], XmNminimum, minimum); n++;
 XtSetArg(args[n], XmNshowValue, True); n++;
 XtSetArg(args[n], XmNscaleMultiple, 1); n++;
 xmstring = XmStringCreateSimple(title);
 XtSetArg(args[n], XmNtitleString, xmstring); n++;
 widget = XmCreateScale(parent, name, args, n);
 XmScaleSetValue(widget, init);
 XmStringFree(xmstring);
 XtAddCallback(widget, XmNvalueChangedCallback, callback, client_data);
 XtManageChild(widget);
 return widget;
}

/*************************************************************/
------------------------------
XspecMath.c
/******************************************/
/*XspecMath.c                              */
/*******************************************/

#include <stdio.h>
#include <math.h>
#include "XspecConv.h"
/****************************************/
extern double width;    /*these are the globals that can be changed */
extern point3d eye;   /*from the control window */
extern point3d view;
extern double widthD;  /*widthD is in degrees, width is in radians */

extern vector upV;
extern line  *lines;
extern point3d *verts3d;
extern point2d *screenVerts;
extern angles *viewAngles;

extern constantViewAngle;
extern int numlines;
extern int numpoints;
extern const int WINDOWSIZE;

/****************************************/
/*returns the dot product of two vectors  */

double dotP(vector A, vector B)
{
 double result;
 result = A.x*B.x + A.y*B.y + A.z*B.z;
 return result;
}

/****************************************/
/*returns the cross product of two vectors  */

vector crossP(vector A, vector B)
{
 vector result;
 result.x = A.y*B.z - A.z*B.y;
 result.y = A.z*B.x - A.x*B.z;
 result.z = A.x*B.y - A.y*B.x;
 return result;
}

/*******************************************/
/*returns the angle between two vectors- the inverse cos of */
/*their dot product over the product of their magnitudes */

double angleBetweenVectors (vector A, vector B)
{
 double dotprod, magA, magB;
 double prod, cosVal;
 dotprod = dotP(A,B);
 magA = sqrt((A.x*A.x) + (A.y*A.y) + (A.z*A.z));
 magB = sqrt((B.x*B.x) + (B.y*B.y) + (B.z*B.z));
 prod = magA*magB;
 if (prod == 0) prod = 0.001;
 cosVal = (dotprod/(prod));
 if (cosVal >= 1)
   {
    return 0;
  }
 else if (cosVal <= -1)
   {
    return 3.1415;
  }
 else
   {
    return acos (cosVal);
  }
}

/********************************************/
/*boolean function, returns true if the tip of p is on the opposite side  */
/*of the plane (to which v is a normal) from the tip of v  */

int oppositeSide(vector p, vector v)
{
 double t, denominator;
 denominator = v.x*v.x + v.y*v.y + v.z*v.z;
 if (denominator == 0) denominator = 0.001;
 t = (v.x*(-p.x) + v.y*(-p.y) + v.z*(-p.z))
    /denominator;
 return (t<0);       /*if t<0 then the point is on the opposite side*/
}

/********************************************/
/*given 3D point, returns the theta and phi of the view from the global 'eye' */

angles findAngles(point3d point)
{
 angles result;
 point3d right;
 vector viewPlaneV, pointPlaneV;
 vector viewV, pointV;

if(constantViewAngle)
  {
 viewV.x = (view.x);
 viewV.y = (view.y);
 viewV.z = (view.z);
  }
else
  {
 viewV.x = (view.x-eye.x);
 viewV.y = (view.y-eye.y);
 viewV.z = (view.z-eye.z);
  }
 /*set up default views if view=eye or if view straight up*/
 if (viewV.x == 0 && viewV.y == 0)
   {
    if (viewV.y == 0)
      {
	viewV.y = 1;
      }
     upV.x = 1;
   }
 else upV.x = 0;
 pointV.x = (point.x-eye.x);
 pointV.y = (point.y-eye.y);
 pointV.z = (point.z-eye.z);

 result.phi = angleBetweenVectors(viewV,pointV);

 if(result.phi <= 0.0001 || result.phi >= 3.1415)
   {
     result.theta = 0;
   }
 else
   {
     viewPlaneV = crossP(viewV, upV);
     pointPlaneV = crossP(viewV, pointV);
     result.theta = angleBetweenVectors(viewPlaneV, pointPlaneV);
     if(oppositeSide(pointV, viewPlaneV))
      {
        result.theta = -result.theta;
      }
   }
 return result;
}

/********************************************/
/* given theta and phi, the view angles, return points to be plotted */

point2d findScreenPoints(angles anglePair)
{
 point2d result;
 result.x = (int)floor(WINDOWSIZE/width * anglePair.phi * sin(anglePair.theta) + WINDOWSIZE/2);
 result.y = (int)floor(-WINDOWSIZE/width * anglePair.phi * cos(anglePair.theta) + WINDOWSIZE/2);
 return result;
}

/*******************************************/
----------------------------
XspecConv.h
/************************/
/* XspecConv.h               */
/*************************/
#include <Xm/Xm.h>
#define point3d vector

typedef struct
{
double x, y, z;
}vector;

typedef struct
{
double theta, phi;
}angles;

typedef struct
{
int x, y;
}point2d;

typedef struct
{
int from, to;
}
line;

extern Widget CreateMenu (Widget parent, char* name);

extern Widget CreateMenuChoice(Widget parent, char* name,
                               XtCallbackProc callback,
                               XtPointer client_data);
extern Widget CreatePushButton(Widget parent, char* name,
                               XtCallbackProc callback,
                               XtPointer client_data);
extern Widget CreateToggleButton(Widget parent, char* name,
                               XtCallbackProc callback,
                               int client_data);

extern Widget CreateDrawingArea(Widget parent, char* name,
                                int width, int height,
                                XtCallbackProc callback,
                                XtPointer client_data);

extern void UnionExposeWithRegion(XExposeEvent* event, Region region);

extern void ClipToRegion(Display* display, GC gc, Region region);

extern Widget CreateShell(Widget parent, char* app_name, char* app_class, char* title);

extern Widget CreateHSlider(Widget parent, char* name,
                            int minimum, int maximum,
                            int init,
                            char* title, XtCallbackProc callback,
                            XtPointer client_data);
----------------------
XspecMath.h
/********************************************/
/*XspecMath.h                               */
/********************************************/




/**********************************************/
/*given 3D point, returns the theta and phi of the view from the global 'eye' */

extern angles findAngles(point3d point);

/********************************************/
/* given theta and phi, the view angles, return points to be plotted */

extern point2d findScreenPoints(angles anglePair);

/*******************************************/
-------------------------------
boxes.c
/*********************************
      boxes.c
copyright 1996 by Jon T. Bierce-Wilson
creates files to be used by Xspec program
*****************************************/


#include <stdio.h>
#include <stdlib.h>

main()
{
int i, j;
float d = .90;
float x, y, z;
int numrows;
int numcols;
char filename[101];
FILE *f1;
 printf("This program creates files to be used with the Xspec program.\n");
 printf("It creates files for cubes starting at 0,0,0\n");
 printf("How many boxes up y axis? ");
 scanf(" %d",&numrows);
 printf("How many boxes over x axis? ");
 scanf(" %d",&numcols);

 (void)fgets(filename,101,stdin);
 (void)fputs("Enter the output file name:  ",stdout);
 fflush(stdout);
 fgets(filename,101,stdin);
 filename[strlen(filename)-1]='\0';
 f1= fopen(filename,"w");
 if (f1 == NULL)
{
(void)printf("Unable to open file");
perror("open");
exit(1);
}
 fprintf(f1,"%d\n",numcols * numrows * 8);
 x = 0.55;
 y = 0.55;
 z = 0.55;
 for(j=0;j<numrows;j++)
  for(i=0;i<numcols;i++)
  {
    fprintf(f1,"%f %f %f \n", x+i,   y+j,   z);
    fprintf(f1,"%f %f %f \n", x+i+d, y+j,   z);
    fprintf(f1,"%f %f %f \n", x+i+d, y+j+d, z);
    fprintf(f1,"%f %f %f \n", x+i,   y+j+d, z);
    fprintf(f1,"%f %f %f \n", x+i,   y+j,   z+d);
    fprintf(f1,"%f %f %f \n", x+i+d, y+j,   z+d);
    fprintf(f1,"%f %f %f \n", x+i+d, y+j+d, z+d);
    fprintf(f1,"%f %f %f \n\n", x+i, y+j+d, z+d);
   }

 fprintf(f1," %d\n", numrows * numcols * 12);
 for (j=0;j<numrows;j++)
  for (i=0;i<numcols;i++)
   {
    fprintf(f1," %d %d\n", i*8*numrows+j*8,   i*8*numrows+j*8+1);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+1, i*8*numrows+j*8+2);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+2, i*8*numrows+j*8+3);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+3, i*8*numrows+j*8);

    fprintf(f1," %d %d\n", i*8*numrows+j*8,   i*8*numrows+j*8+4);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+1, i*8*numrows+j*8+5);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+2, i*8*numrows+j*8+6);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+3, i*8*numrows+j*8+7);

    fprintf(f1," %d %d\n", i*8*numrows+j*8+4, i*8*numrows+j*8+5);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+5, i*8*numrows+j*8+6);
    fprintf(f1," %d %d\n", i*8*numrows+j*8+6, i*8*numrows+j*8+7);
    fprintf(f1," %d %d\n\n", i*8*numrows+j*8+7, i*8*numrows+j*8+4);

  }
 fclose(f1);
printf("Wrote file %s\n",filename);
}
----------------------
motic.c
/********************************/
/* convenience functions for motif drawing program */


#include "motif.h"
#include <Xm/CascadeB.h>
#include <Xm/PushB.h>
#include <Xm/RowColumn.h>
#include <Xm/DrawingA.h>

/********************************/

Widget CreateMenu(Widget parent, char* name)
{
 Widget cascade;
 Widget menuwidget;
 Arg args[20];
 int n;

 n = 0;
 menuwidget = XmCreatePulldownMenu(parent, name, args, n);
 n = 0;
 XtSetArg(args[n], XmNsubMenuId, menuwidget); n++;
 cascade = XmCreateCascadeButton(parent, name, args, n);
 XtManageChild(cascade);
 return menuwidget;
}

/******************************************/

Widget CreateMenuChoice(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)
{
 return CreatePushbutton(parent, name, callback, client_data);
}

/*****************************************/

Widget CreatePushbutton(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)
{
 Widget button;
 Arg args[20];
 int n;

 n = 0;
 button = XmCreatePushButton(parent, name, args, n);
 XtManageChild(button);
 XtAddCallback(button, XmNactivateCallback, callback, client_data);
 return button;
}

/**********************************************/

Widget CreateDrawingArea(Widget parent, char* name, int width, int height,
                         XtCallbackProc callback, XtPointer client_data)
{
 Widget widget;
 Arg args[20];
 int n;

 n = 0;
 XtSetArg(args[n], XmNwidth, width); n++;
 XtSetArg(args[n], XmNheight, height); n++;
 XtSetArg(args[n], XmNallowResize, True); n++;
 widget = XmCreateDrawingArea(parent, name, args, n);
 XtManageChild(widget);
 XtAddCallback(widget, XmNresizeCallback, callback, client_data);
 XtAddCallback(widget, XmNinputCallback, callback, client_data);
 XtAddCallback(widget, XmNexposeCallback, callback, client_data);
 return widget;
}

/*****************************************************/

------------------------
motift.c
/********************************/
/* convenience functions for motif drawing program */


#include "motif.h"
#include <Xm/CascadeB.h>
#include <Xm/PushB.h>
#include <Xm/RowColumn.h>
#include <Xm/DrawingA.h>

/********************************/

Widget CreateMenu(Widget parent, char* name)
{
 Widget cascade;
 Widget menuwidget;
 Arg args[20];
 int n;

 n = 0;
 menuwidget = XmCreatePulldownMenu(parent, name, args, n);
 n = 0;
 XtSetArg(args[n], XmNsubMenuId, menuwidget); n++;
 cascade = XmCreateCascadeButton(parent, name, args, n);
 XtManageChild(cascade);
 return menuwidget;
}

/******************************************/

Widget CreateMenuChoice(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)
{
 return CreatePushbutton(parent, name, callback, client_data);
}

/*****************************************/

Widget CreatePushbutton(Widget parent, char* name,
                        XtCallbackProc callback,
                        XtPointer client_data)
{
 Widget button;
 Arg args[20];
 int n;

 n = 0;
 button = XmCreatePushButton(parent, name, args, n);
 XtManageChild(button);
 XtAddCallback(button, XmNactivateCallback, callback, client_data);
 return button;
}

/**********************************************/

Widget CreateDrawingArea(Widget parent, char* name, int width, int height,
                         XtCallbackProc callback, XtPointer client_data)
{
 Widget widget;
 Arg args[20];
 int n;

 n = 0;
 XtSetArg(args[n], XmNwidth, width); n++;
 XtSetArg(args[n], XmNheight, height); n++;
 XtSetArg(args[n], XmNallowResize, True); n++;
 widget = XmCreateDrawingArea(parent, name, args, n);
 XtManageChild(widget);
 XtAddCallback(widget, XmNresizeCallback, callback, client_data);
 XtAddCallback(widget, XmNinputCallback, callback, client_data);
 XtAddCallback(widget, XmNexposeCallback, callback, client_data);
 return widget;
}

/*****************************************************/

------------------------
motifst.c
/*Motif test program*/

/* #include "motif.h" */
#include <X11/Xutil.h>
#include <Xm/MainW.h>
#include <Xm/RowColumn.h>
#include <stdio.h>

Display* global_display;
Window   global_window;
GC       global_gc;
Region   global_region = (Region) NULL;

/****************************************/

extern void DrawTest(Display* display, Window window, GC gc);
extern Widget CreateMenu (Widget parent, char* name);
extern Widget CreateMenuChoice (Widget menu, char* name,
                         XtCallbackProc callback,
                         XtPointer client_data);
extern Widget CreateDrawingArea (Widget parent, char* name,
                                 int width, int height,
                                 XtCallbackProc callback,
                                 XtPointer client_data);

/*****************************************/
void HandleExpose(XExposeEvent* event)
{
 XRectangle rectangle;
 if (global_region == (Region) NULL)
  {
   global_region = XCreateRegion();
  }
 UnionExposeWithRegion(event, global_region);
 if (event->count == 0)
  {
   ClipToRegion(global_display, global_gc, global_region);
   XDestroyRegion(global_region);
   global_region = (region) NULL;
   DrawTest(global_display, global_window, global_gc);
   XSetClipMask(global_display, global_gc, (Pixmap) None);
  }
}

/****************************************/

void drawCB(Widget widget, XtPointer client_data, XtPointer call_data)
{
 XmDrawingAreaCallbackStruct*  ptr;
 ptr = (XmDrawingAreaCallbackStruct*) call_data;
 if (ptr->reason == XmCR_EXPOSE)
  {
   HandleExpose((XExposeEvent*) ptr->event);
  }
}

/******************************************/

static void exitCB(Widget widget, XtPointer client_data,
                   XtPointer call_data)
{
 exit(0);
}

/*******************************************/

int main(int argc, char** argv)
{
 XtAppContext app_context;
 Display* display;
 Widget parent;
 Widget mainwindow;
 Widget menubar;
 Widget filemenu;
 Widget exitchoice;
 Widget drawingarea;
 Arg    args[20];
 int    n;
 int    screen;

 n = 0;
 XtSetArg(args[n], XmNmappedWhenManaged, False); n++;
 XtSetArg(args[n], XmNallowResize, True); n++;
 XtSetArg(args[n], XmNwidth, 500); n++;
 XtSetArg(args[n], XmNheight, 360); n++;
 parent = XtAppInitialize(&app_context, "ProX", (XrmOptionDescList) NULL,
                          0,  ARGC_PTR &argc, argv, (String*) NULL, args, n);
 n = 0;
 XtSetArg(args[n], XmNmappedWhenManaged, True); n++;
 mainwindow = XmCreateMainWindow(parent, "main", args, n);
 n = 0;
 menubar = XmCreateMenuBar(mainwindow, "menubar", args, n);
 XtManageChild(menubar);
 filemenu = CreateMenu(menubar, "filemenu");
 exitchoice = CreateMenuChoice(filemenu, "exitchoice", (XtCallbackProc) exitCB,
                              (XtPointer) NULL);
 drawingarea = CreateDrawingArea(mainwindow, "drawingarea", 640, 480,
                                (XtCallbackProc) drawCB, (XtPointer) NULL);
 XmMainWindowSetAreas(mainwindow, menubar, (Widget) NULL,
                                      (Widget) NULL, (Widget) NULL, drawingarea);
 XtManageChild(mainwindow);
 XtRealizeWidget(parent);
 global_display = XtDisplay(drawingarea);
 global_window = XtWindow(drawingarea);
 screen = DefaultScreen(global_display);
 global_gc = XCreateGC(global_display, global_window, OL, (XGCValues*) NULL);
 XSetForeground(global_display, global_gc,
               BlackPixel(global_display, screen));
 XtMapWidget(parent);
 XtAppMainLoop(app_context);
 return 0;
}
--------------------------
motif.h
/*************************/
/* motif.h               */
/*************************/
#ifndef motif_h_
#define motif_h_      1
#endif

#include <Xm/Xm.h>
#if XtSpecificationRelease > 4
#define ARGC_PTR  (int*)
#else
#define ARGC_PTR  (unsigned int*)
#endif

/**************************************/

extern Widget CreateMenu (Widget parent, char* name);

extern Widget CreateMenuChoice(Widget parent, char* name,
                               XtCallbackProc callback,
                               XtPointer client_data);

extern Widget CreateDrawingArea(Widget parent, char* name,
                                int width, int height,
                                XtCallbackProc callback,
                                XtPointer client_data);
--------------------------------
digitize.c
/*************************************
             digitize.c
copyright 1996 Jon T. Bierce-Wilson
based on "dig346.c" by Dean Brock
**************************************/

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>
#include <sys/time.h>
#include <string.h>

#define MSECWAIT 50
#define MAXPOINTS 300
#define MAXLINES 450

void eatum(int fdin, int msec)
  {
   struct timeval waittime ;
   fd_set fdmask ;
   char eatitup[14] ;
   waittime.tv_sec  = msec/1000 ;
   waittime.tv_usec = (msec%1000)*1000 ;
   FD_ZERO(&fdmask) ;
   FD_SET(fdin, &fdmask) ;
   while (select(fdin+1,&fdmask,(fd_set *)NULL,(fd_set *)NULL,&waittime) == 1)
     {
      (void) read(fdin, eatitup, 13) ;
      FD_SET(fdin, &fdmask) ;
     }
  }

void main(int argc, char * argv[])
  {
   FILE *outf;
   int ttyfd, cx, cy, i,
       llx, lly,urx, ury, debug, numpts, numlines ;
   double maxx, diffx, maxy, rz, state;
   struct {double x; double y;} pointArray[MAXPOINTS];
   struct {int from; int to;} lineArray[MAXLINES];
   char button, inbuff[14], filename[101], filename2[101] ;
   debug = (argc == 2 && !strcmp(argv[1], "-d")) ;
#ifdef __alpha
   ttyfd = open("/dev/tty00", O_RDONLY) ;
#else
   ttyfd = open("/dev/tty16", O_RDONLY) ;
#endif
   if (ttyfd < 0)
     {
      perror("open") ;
      exit(1) ;
     }

   (void) fputs("This program creates datafiles for the program Xspec\n",stdout);
   (void) fputs("using a digitizing tablet\n",stdout);
   (void) fputs("Mash on origin with left(0) digitizer button\n\n", stdout) ;
   (void) read(ttyfd, inbuff, 13) ;
   (void) sscanf(inbuff, "%1cD%5d%5d\n", &button, &llx, &lly) ;
   if (debug)
      (void) printf("Lower left  = (%d, %d)\n", llx, lly) ;
   eatum(ttyfd, MSECWAIT) ;

   (void) fputs("Mash on a first quadrant (upper right) reference point\n",stdout);
   (void) fputs("with a known integer X value.\n\n", stdout) ;
   (void) read(ttyfd, inbuff, 13) ;
   (void) sscanf(inbuff, "%1cD%5d%5d\n", &button, &urx, &ury) ;
   if (debug)
      (void) printf("Upper right = (%d, %d)\n\n", urx, ury) ;

   diffx = (double)urx-llx ;
   (void) printf("Enter the value for X at the reference point:  ") ;
   (void) fflush(stdout) ;
   (void) scanf("%lf", &maxx) ;
   maxy = (ury-lly)*maxx/diffx ;
   (void) printf("\nThe Y co-ordinate of the reference point is %f)\n\n",
		 maxy) ;
   (void) printf("Enter the value of the constant Z plane: ");
   (void) fflush(stdout);
   (void) scanf("%lf",&rz);

   (void) fgets(filename, 100, stdin) ;
   (void) fputs("Enter the output file name:  ", stdout) ;
   (void) fflush(stdout) ;
   (void) fgets(filename, 100, stdin) ;
   filename[strlen(filename) - 1] = '\0' ;
   outf = fopen(filename, "w") ;
   if (outf == NULL)
     {
      (void) printf("Unable to open %d\n", filename) ;
      perror("open") ;
      exit(1) ;
     }

   printf("\nWriting to output file %s\n\n", filename) ;

   eatum(ttyfd, MSECWAIT) ;
   (void) fputs("Add each point in polyline with left (0) click.\n", stdout) ;
   (void) fputs("Click right (3) for final point in each polyline.\n", stdout) ;
   (void) fputs("Continue with new polyline or\n", stdout) ;
   (void) fputs("end by pressing the E button.\n\n", stdout) ;

   numpts = 0 ; numlines = 0; state = 0;
   (void) read(ttyfd, inbuff, 13) ;
   (void) sscanf(inbuff, "%1cD%5d%5d\n", &button, &cx, &cy) ;
   while (button != 'E')
     {
      if(state == 0 && button == '0')
	{
	  pointArray[numpts].x = (cx-llx)*maxx/diffx ;
	  pointArray[numpts].y = (cy-lly)*maxx/diffx ;
	  state = 1 ;
	  numpts++;
	}
      else if(state == 1)
	{
	  pointArray[numpts].x = (cx-llx)*maxx/diffx ;
	  pointArray[numpts].y = (cy-lly)*maxx/diffx ;
	  lineArray[numlines].from = numpts - 1;
	  lineArray[numlines].to = numpts;
	  numpts++;
	  numlines++;
	  if(button == '3') {state = 0;}
	}
      else
	printf("%c",0x7);

      eatum(ttyfd, MSECWAIT) ;
      (void) read(ttyfd, inbuff, 13) ;
      (void) sscanf(inbuff, "%1cD%5d%5d\n", &button, &cx, &cy) ;
     }

   fprintf(outf,"%d\n", numpts);
   for(i=0;i<numpts;i++)
    {
  (void) fprintf(outf, "%lf %lf %lf\n",pointArray[i].x,pointArray[i].y,rz);
    }

   fprintf(outf,"%d\n", numlines);
   for(i=0;i<numlines;i++)
    {
  (void) fprintf(outf, "%d %d\n",lineArray[i].from, lineArray[i].to);
    }

   (void) fclose(outf) ;
   (void) printf("\n\n%d points written to file %s\n", numpts, filename) ;

  } /* main */
-------------------------------------
jbw.xsp
 449
 -0.739760 1.679520 0.000000
 -0.053012 1.667468 0.000000
 -0.048192 1.602408 0.000000
 -0.166264 1.583132 0.000000
 -0.185544 1.515664 0.000000
 0.183132 0.612048 0.000000
 0.426508 1.149396 0.000000
 0.310844 1.486748 0.000000
 0.243372 1.585544 0.000000
 0.113252 1.609640 0.000000
 0.115664 1.660240 0.000000
 0.853012 1.674700 0.000000
 0.862652 1.624096 0.000000
 0.754216 1.609640 0.000000
 0.701204 1.515664 0.000000
 1.031324 0.619276 0.000000
 1.342168 1.436144 0.000000
 1.354216 1.580724 0.000000
 1.202408 1.609640 0.000000
 1.202408 1.665060 0.000000
 1.595180 1.662652 0.000000
 1.609640 1.609640 0.000000
 1.525300 1.592772 0.000000
 1.486748 1.498796 0.000000
 0.898796 -0.055420 0.000000
 0.481928 1.007228 0.000000
 0.024096 -0.026508 0.000000
 -0.602408 1.532532 0.000000
 -0.657832 1.587952 0.000000
 -0.742168 1.619276 0.000000
 -0.742168 1.669880 0.000000
 1.850604 1.648192 0.000000
 1.987952 1.703616 0.000000
 2.120480 1.638556 0.000000
 2.159036 1.525300 0.000000
 2.113252 1.412048 0.000000
 2.004820 1.354216 0.000000
 1.869880 1.412048 0.000000
 1.824096 1.506024 0.000000
 1.824096 1.578312 0.000000
 1.857832 1.645784 0.000000
 1.710844 1.137348 0.000000
 2.149396 1.144580 0.000000
 2.142168 0.171084 0.000000
 2.178312 0.098796 0.000000
 2.255420 0.077108 0.000000
 2.255420 0.009640 0.000000
 1.715664 0.019276 0.000000
 1.715664 0.077108 0.000000
 1.797592 0.139760 0.000000
 1.828916 1.014456 0.000000
 1.792772 1.065060 0.000000
 1.698796 1.074700 0.000000
 1.703616 1.122892 0.000000
 2.380724 1.660240 0.000000
 2.826508 1.657832 0.000000
 2.821688 0.137348 0.000000
 2.903616 0.060240 0.000000
 2.906024 0.009640 0.000000
 2.368676 0.014456 0.000000
 2.378312 0.065060 0.000000
 2.484336 0.127712 0.000000
 2.477108 1.551808 0.000000
 2.380724 1.604820 0.000000
 2.392772 1.669880 0.000000
 3.122892 1.072288 0.000000
 3.279520 1.146988 0.000000
 3.474700 1.144580 0.000000
 3.619276 1.106024 0.000000
 3.686748 1.106024 0.000000
 3.710844 1.171084 0.000000
 3.761444 1.171084 0.000000
 3.766264 0.756628 0.000000
 3.706024 0.746988 0.000000
 3.534940 1.012048 0.000000
 3.428916 1.055420 0.000000
 3.308432 1.033736 0.000000
 3.262652 0.978312 0.000000
 3.339760 0.862652 0.000000
 3.727712 0.578312 0.000000
 3.800000 0.472288 0.000000
 3.821688 0.315664 0.000000
 3.761444 0.144580 0.000000
 3.631324 0.028916 0.000000
 3.467468 -0.004820 0.000000
 3.296384 0.019276 0.000000
 3.180724 0.057832 0.000000
 3.110844 0.045784 0.000000
 3.074700 -0.002408 0.000000
 3.043372 -0.007228 0.000000
 3.043372 0.375904 0.000000
 3.096384 0.392772 0.000000
 3.197592 0.195180 0.000000
 3.344580 0.093976 0.000000
 3.501204 0.084336 0.000000
 3.571084 0.127712 0.000000
 3.600000 0.207228 0.000000
 3.590360 0.289156 0.000000
 3.503616 0.339760 0.000000
 3.144580 0.551808 0.000000
 3.065060 0.686748 0.000000
 3.031324 0.833736 0.000000
 3.065060 0.975904 0.000000
 3.125300 1.089156 0.000000
 4.202408 1.069880 0.000000
 4.378312 1.146988 0.000000
 4.590360 1.154216 0.000000
 4.787952 1.089156 0.000000
 4.903616 0.973492 0.000000
 5.002408 0.778312 0.000000
 5.033736 0.662652 0.000000
 5.021688 0.443372 0.000000
 4.959036 0.240964 0.000000
 4.865060 0.110844 0.000000
 4.739760 0.043372 0.000000
 4.609640 0.004820 0.000000
 4.469880 -0.007228 0.000000
 4.274700 0.038556 0.000000
 4.139760 0.139760 0.000000
 4.045784 0.257832 0.000000
 3.980724 0.397592 0.000000
 3.992772 0.710844 0.000000
 4.060240 0.881928 0.000000
 4.139760 1.014456 0.000000
 4.197592 1.069880 0.000000
 4.508432 1.062652 0.000000
 4.585544 1.028916 0.000000
 4.638556 0.973492 0.000000
 4.662652 0.910844 0.000000
 4.681928 0.265060 0.000000
 4.633736 0.159036 0.000000
 4.573492 0.106024 0.000000
 4.503616 0.093976 0.000000
 4.414456 0.118072 0.000000
 4.371084 0.185544 0.000000
 4.334940 0.289156 0.000000
 4.346988 0.865060 0.000000
 4.402408 0.992772 0.000000
 4.448192 1.043372 0.000000
 4.510844 1.055420 0.000000
 5.190360 1.134940 0.000000
 5.640964 1.115664 0.000000
 5.669880 1.007228 0.000000
 5.816868 1.125300 0.000000
 5.944580 1.149396 0.000000
 6.057832 1.127712 0.000000
 6.175904 1.040964 0.000000
 6.236144 0.910844 0.000000
 6.243372 0.739760 0.000000
 6.248192 0.163856 0.000000
 6.354216 0.074700 0.000000
 6.356628 0.024096 0.000000
 5.809640 0.009640 0.000000
 5.804820 0.060240 0.000000
 5.896384 0.120480 0.000000
 5.901204 0.175904 0.000000
 5.908432 0.869880 0.000000
 5.898796 0.910844 0.000000
 5.821688 0.975904 0.000000
 5.696384 0.903616 0.000000
 5.640964 0.807228 0.000000
 5.648192 0.132532 0.000000
 5.722892 0.067468 0.000000
 5.744580 0.000000 0.000000
 5.204820 0.007228 0.000000
 5.204820 0.038556 0.000000
 5.296384 0.127712 0.000000
 5.320480 1.016868 0.000000
 5.212048 1.069880 0.000000
 5.195180 1.137348 0.000000
 -7.820608 1.735756 0.000000
 -6.749092 1.713940 0.000000
 -6.572120 1.667880 0.000000
 -6.421820 1.510304 0.000000
 -6.358788 1.309092 0.000000
 -6.407272 1.146668 0.000000
 -6.509092 1.037576 0.000000
 -6.686060 0.945456 0.000000
 -6.499392 0.872728 0.000000
 -6.361212 0.753940 0.000000
 -6.312728 0.540608 0.000000
 -6.329696 0.460608 0.000000
 -6.472728 0.256968 0.000000
 -6.652120 0.150304 0.000000
 -6.850908 0.104244 0.000000
 -7.127272 0.084848 0.000000
 -7.832728 0.099392 0.000000
 -7.832728 0.155152 0.000000
 -7.648484 0.189092 0.000000
 -7.607272 0.244848 0.000000
 -7.597576 1.546668 0.000000
 -7.631516 1.643636 0.000000
 -7.825456 1.672728 0.000000
 -7.830304 1.721212 0.000000
 -7.233940 1.626668 0.000000
 -7.030304 1.616968 0.000000
 -6.858180 1.534544 0.000000
 -6.785456 1.423032 0.000000
 -6.773332 1.255756 0.000000
 -6.906668 1.042424 0.000000
 -7.059392 1.001212 0.000000
 -7.226668 0.996364 0.000000
 -7.226668 1.633940 0.000000
 -7.226668 0.880000 0.000000
 -6.952728 0.870304 0.000000
 -6.775756 0.744244 0.000000
 -6.749092 0.601212 0.000000
 -6.756364 0.419392 0.000000
 -6.880000 0.273940 0.000000
 -6.998788 0.210908 0.000000
 -7.151516 0.201212 0.000000
 -7.229092 0.283636 0.000000
 -7.229092 0.894544 0.000000
 -5.890908 1.752728 0.000000
 -5.747880 1.696968 0.000000
 -5.709092 1.587880 0.000000
 -5.750304 1.469092 0.000000
 -5.801212 1.425456 0.000000
 -5.886060 1.406060 0.000000
 -5.978180 1.430304 0.000000
 -6.026668 1.495756 0.000000
 -6.058180 1.566060 0.000000
 -6.021820 1.658180 0.000000
 -5.978180 1.735756 0.000000
 -5.886060 1.757576 0.000000
 -6.157576 1.190304 0.000000
 -5.709092 1.197576 0.000000
 -5.716364 0.240000 0.000000
 -5.699392 0.193940 0.000000
 -5.614544 0.162424 0.000000
 -5.629092 0.096968 0.000000
 -6.164848 0.096968 0.000000
 -6.169696 0.155152 0.000000
 -6.080000 0.225456 0.000000
 -6.053332 1.054544 0.000000
 -6.082424 1.115152 0.000000
 -6.160000 1.151516 0.000000
 -6.157576 1.192728 0.000000
 -5.280000 1.110304 0.000000
 -5.129696 1.207272 0.000000
 -4.972120 1.207272 0.000000
 -4.775756 1.144244 0.000000
 -4.647272 0.998788 0.000000
 -4.576968 0.824244 0.000000
 -4.564848 0.700608 0.000000
 -5.136968 0.669092 0.000000
 -5.107880 0.513940 0.000000
 -5.018180 0.368484 0.000000
 -4.843636 0.317576 0.000000
 -4.698180 0.363636 0.000000
 -4.608484 0.472728 0.000000
 -4.557576 0.438788 0.000000
 -4.707880 0.242424 0.000000
 -4.829092 0.123636 0.000000
 -5.032728 0.082424 0.000000
 -5.343032 0.172120 0.000000
 -5.464244 0.402424 0.000000
 -5.507880 0.671516 0.000000
 -5.444848 0.899392 0.000000
 -5.384244 1.008484 0.000000
 -5.289696 1.112728 0.000000
 -5.010908 1.112728 0.000000
 -4.928484 1.071516 0.000000
 -4.877576 0.984244 0.000000
 -4.872728 0.778180 0.000000
 -5.141820 0.773332 0.000000
 -5.129696 0.928484 0.000000
 -5.103032 1.040000 0.000000
 -5.006060 1.136968 0.000000
 -4.368484 1.187880 0.000000
 -3.927272 1.185456 0.000000
 -3.946668 1.010908 0.000000
 -3.784244 1.149092 0.000000
 -3.636364 1.207272 0.000000
 -3.495756 1.195152 0.000000
 -3.418180 1.081212 0.000000
 -3.454544 0.928484 0.000000
 -3.553940 0.853332 0.000000
 -3.672728 0.875152 0.000000
 -3.716364 0.950304 0.000000
 -3.738180 0.991516 0.000000
 -3.844848 0.955152 0.000000
 -3.898180 0.848484 0.000000
 -3.944244 0.666668 0.000000
 -3.949092 0.213332 0.000000
 -3.864244 0.157576 0.000000
 -3.864244 0.109092 0.000000
 -4.375756 0.096968 0.000000
 -4.378180 0.157576 0.000000
 -4.300608 0.189092 0.000000
 -4.278788 0.249696 0.000000
 -4.278788 1.037576 0.000000
 -4.276364 1.124848 0.000000
 -4.380608 1.141820 0.000000
 -4.378180 1.209696 0.000000
 -3.187880 1.081212 0.000000
 -3.013332 1.190304 0.000000
 -2.821820 1.226668 0.000000
 -2.647272 1.180608 0.000000
 -2.463032 1.047272 0.000000
 -2.441212 0.901820 0.000000
 -2.545456 0.770908 0.000000
 -2.712728 0.836364 0.000000
 -2.753940 0.991516 0.000000
 -2.809696 1.112728 0.000000
 -2.945456 1.090908 0.000000
 -3.018180 0.831516 0.000000
 -2.986668 0.591516 0.000000
 -2.901820 0.392728 0.000000
 -2.749092 0.281212 0.000000
 -2.654544 0.273940 0.000000
 -2.467880 0.397576 0.000000
 -2.426668 0.363636 0.000000
 -2.547880 0.218180 0.000000
 -2.741820 0.106668 0.000000
 -3.032728 0.104244 0.000000
 -3.270304 0.290908 0.000000
 -3.372120 0.484848 0.000000
 -3.374544 0.736968 0.000000
 -3.296968 0.899392 0.000000
 -3.190304 1.086060 0.000000
 -2.123636 1.107880 0.000000
 -1.895756 1.209696 0.000000
 -1.677576 1.207272 0.000000
 -1.500608 1.081212 0.000000
 -1.393940 0.865456 0.000000
 -1.369696 0.659392 0.000000
 -1.949092 0.669092 0.000000
 -1.888484 0.448484 0.000000
 -1.723636 0.320000 0.000000
 -1.551516 0.307880 0.000000
 -1.408484 0.446060 0.000000
 -1.345456 0.426668 0.000000
 -1.553940 0.167272 0.000000
 -1.752728 0.092120 0.000000
 -2.014544 0.104244 0.000000
 -2.208484 0.298180 0.000000
 -2.290908 0.521212 0.000000
 -2.256968 0.824244 0.000000
 -2.186668 0.969696 0.000000
 -2.099392 1.083636 0.000000
 -1.798788 1.115152 0.000000
 -1.680000 1.037576 0.000000
 -1.670304 0.775756 0.000000
 -1.944244 0.768484 0.000000
 -1.936968 0.964848 0.000000
 -1.886060 1.052120 0.000000
 -1.779392 1.136968 0.000000
 -1.233940 0.756364 0.000000
 -0.586668 0.751516 0.000000
 -0.586668 0.530908 0.000000
 -1.229092 0.513940 0.000000
 -1.214544 0.741820 0.000000
 -11.852568 1.720844 0.000000
 -11.001812 1.718428 0.000000
 -10.992144 1.636252 0.000000
 -11.132328 1.653172 0.000000
 -11.214500 1.561328 0.000000
 -11.214500 1.534744 0.000000
 -11.200000 0.485800 0.000000
 -11.253172 0.345620 0.000000
 -11.407856 0.154684 0.000000
 -11.560120 0.074924 0.000000
 -11.835648 0.065256 0.000000
 -12.070092 0.166768 0.000000
 -12.190936 0.323868 0.000000
 -12.178852 0.497884 0.000000
 -12.058008 0.594560 0.000000
 -11.910576 0.560724 0.000000
 -11.852568 0.468884 0.000000
 -11.886404 0.352872 0.000000
 -11.937160 0.294864 0.000000
 -11.867068 0.171600 0.000000
 -11.765560 0.178852 0.000000
 -11.659216 0.195772 0.000000
 -11.618128 0.304532 0.000000
 -11.606044 1.539576 0.000000
 -11.630212 1.636252 0.000000
 -11.717220 1.667672 0.000000
 -11.830816 1.672508 0.000000
 -11.838068 1.728096 0.000000
 -10.687612 1.135952 0.000000
 -10.530512 1.208460 0.000000
 -10.361328 1.210876 0.000000
 -10.167976 1.148036 0.000000
 -9.938368 0.974020 0.000000
 -9.875528 0.737160 0.000000
 -9.894864 0.490636 0.000000
 -9.981872 0.323868 0.000000
 -10.102720 0.171600 0.000000
 -10.242900 0.113596 0.000000
 -10.383080 0.089424 0.000000
 -10.552264 0.118428 0.000000
 -10.721452 0.188520 0.000000
 -10.839880 0.323868 0.000000
 -10.922056 0.476132 0.000000
 -10.938972 0.676736 0.000000
 -10.878548 0.887008 0.000000
 -10.798792 1.012688 0.000000
 -10.704532 1.138368 0.000000
 -10.407252 1.119032 0.000000
 -10.325076 1.092448 0.000000
 -10.252568 1.027192 0.000000
 -10.216316 0.874924 0.000000
 -10.223564 0.456796 0.000000
 -10.259820 0.306948 0.000000
 -10.308156 0.203020 0.000000
 -10.387916 0.188520 0.000000
 -10.491844 0.219940 0.000000
 -10.525680 0.285196 0.000000
 -10.549848 0.386708 0.000000
 -10.554684 0.949848 0.000000
 -10.532932 1.041692 0.000000
 -10.472508 1.106948 0.000000
 -10.395168 1.128700 0.000000
 -9.682176 1.191540 0.000000
 -9.273716 1.179456 0.000000
 -9.239880 1.077944 0.000000
 -9.080364 1.189124 0.000000
 -8.923264 1.213292 0.000000
 -8.802416 1.177040 0.000000
 -8.698488 1.087612 0.000000
 -8.640484 0.957100 0.000000
 -8.635648 0.280364 0.000000
 -8.594560 0.178852 0.000000
 -8.536556 0.166768 0.000000
 -8.522056 0.094260 0.000000
 -9.070696 0.094260 0.000000
 -9.075528 0.161932 0.000000
 -8.998188 0.215104 0.000000
 -8.983684 0.304532 0.000000
 -8.976436 0.947432 0.000000
 -9.029608 1.019940 0.000000
 -9.080364 1.044108 0.000000
 -9.148036 1.022356 0.000000
 -9.213292 0.969184 0.000000
 -9.259216 0.884592 0.000000
 -9.232628 0.251360 0.000000
 -9.181872 0.154684 0.000000
 -9.128700 0.154684 0.000000
 -9.135952 0.101512 0.000000
 -9.699092 0.101512 0.000000
 -9.703928 0.140180 0.000000
 -9.619336 0.195772 0.000000
 -9.590332 0.253776 0.000000
 -9.578248 1.041692 0.000000
 -9.585500 1.114200 0.000000
 -9.684592 1.126284 0.000000
 -9.689424 1.184292 0.000000
 425
 0 1
 1 2
 2 3
 3 4
 4 5
 5 6
 6 7
 7 8
 8 9
 9 10
 10 11
 11 12
 12 13
 13 14
 14 15
 15 16
 16 17
 17 18
 18 19
 19 20
 20 21
 21 22
 22 23
 23 24
 24 25
 25 26
 26 27
 27 28
 28 29
 29 30
 31 32
 32 33
 33 34
 34 35
 35 36
 36 37
 37 38
 38 39
 39 40
 41 42
 42 43
 43 44
 44 45
 45 46
 46 47
 47 48
 48 49
 49 50
 50 51
 51 52
 52 53
 54 55
 55 56
 56 57
 57 58
 58 59
 59 60
 60 61
 61 62
 62 63
 63 64
 65 66
 66 67
 67 68
 68 69
 69 70
 70 71
 71 72
 72 73
 73 74
 74 75
 75 76
 76 77
 77 78
 78 79
 79 80
 80 81
 81 82
 82 83
 83 84
 84 85
 85 86
 86 87
 87 88
 88 89
 89 90
 90 91
 91 92
 92 93
 93 94
 94 95
 95 96
 96 97
 97 98
 98 99
 99 100
 100 101
 101 102
 102 103
 104 105
 105 106
 106 107
 107 108
 108 109
 109 110
 110 111
 111 112
 112 113
 113 114
 114 115
 115 116
 116 117
 117 118
 118 119
 119 120
 120 121
 121 122
 122 123
 123 124
 125 126
 126 127
 127 128
 128 129
 129 130
 130 131
 131 132
 132 133
 133 134
 134 135
 135 136
 136 137
 137 138
 138 139
 140 141
 141 142
 142 143
 143 144
 144 145
 145 146
 146 147
 147 148
 148 149
 149 150
 150 151
 151 152
 152 153
 153 154
 154 155
 155 156
 156 157
 157 158
 158 159
 159 160
 160 161
 161 162
 162 163
 163 164
 164 165
 165 166
 166 167
 167 168
 168 169
 170 171
 171 172
 172 173
 173 174
 174 175
 175 176
 176 177
 177 178
 178 179
 179 180
 180 181
 181 182
 182 183
 183 184
 184 185
 185 186
 186 187
 187 188
 188 189
 189 190
 190 191
 191 192
 192 193
 194 195
 195 196
 196 197
 197 198
 198 199
 199 200
 200 201
 201 202
 203 204
 204 205
 205 206
 206 207
 207 208
 208 209
 209 210
 210 211
 211 212
 213 214
 214 215
 215 216
 216 217
 217 218
 218 219
 219 220
 220 221
 221 222
 222 223
 223 224
 225 226
 226 227
 227 228
 228 229
 229 230
 230 231
 231 232
 232 233
 233 234
 234 235
 235 236
 236 237
 238 239
 239 240
 240 241
 241 242
 242 243
 243 244
 244 245
 245 246
 246 247
 247 248
 248 249
 249 250
 250 251
 251 252
 252 253
 253 254
 254 255
 255 256
 256 257
 257 258
 258 259
 259 260
 261 262
 262 263
 263 264
 264 265
 265 266
 266 267
 267 268
 269 270
 270 271
 271 272
 272 273
 273 274
 274 275
 275 276
 276 277
 277 278
 278 279
 279 280
 280 281
 281 282
 282 283
 283 284
 284 285
 285 286
 286 287
 287 288
 288 289
 289 290
 290 291
 291 292
 292 293
 293 294
 295 296
 296 297
 297 298
 298 299
 299 300
 300 301
 301 302
 302 303
 303 304
 304 305
 305 306
 306 307
 307 308
 308 309
 309 310
 310 311
 311 312
 312 313
 313 314
 314 315
 315 316
 316 317
 317 318
 318 319
 319 320
 321 322
 322 323
 323 324
 324 325
 325 326
 326 327
 327 328
 328 329
 329 330
 330 331
 331 332
 332 333
 333 334
 334 335
 335 336
 336 337
 337 338
 338 339
 339 340
 341 342
 342 343
 343 344
 344 345
 345 346
 346 347
 348 349
 349 350
 350 351
 351 352
 353 354
 354 355
 355 356
 356 357
 357 358
 358 359
 359 360
 360 361
 361 362
 362 363
 363 364
 364 365
 365 366
 366 367
 367 368
 368 369
 369 370
 370 371
 371 372
 372 373
 373 374
 374 375
 375 376
 376 377
 377 378
 378 379
 379 380
 381 382
 382 383
 383 384
 384 385
 385 386
 386 387
 387 388
 388 389
 389 390
 390 391
 391 392
 392 393
 393 394
 394 395
 395 396
 396 397
 397 398
 398 399
 400 401
 401 402
 402 403
 403 404
 404 405
 405 406
 406 407
 407 408
 408 409
 409 410
 410 411
 411 412
 412 413
 413 414
 415 416
 416 417
 417 418
 418 419
 419 420
 420 421
 421 422
 422 423
 423 424
 424 425
 425 426
 426 427
 427 428
 428 429
 429 430
 430 431
 431 432
 432 433
 433 434
 434 435
 435 436
 436 437
 437 438
 438 439
 439 440
 440 441
 441 442
 442 443
 443 444
 444 445
 445 446
 446 447
 447 448

-------------------
hsphere.xsp
 534
 0.000000 0.000000 0.000000
 0.000000 0.000000 8.000000
 -8.019078 -0.030207 0.000000
 -7.988871 0.546900 0.000000
 -7.941176 1.096979 0.000000
 -7.850556 1.632750 0.000000
 -7.736089 2.111288 0.000000
 -7.591415 2.594595 0.000000
 -7.411765 3.054054 0.000000
 -7.184420 3.569157 0.000000
 -6.953895 3.992051 0.000000
 -6.650238 4.470588 0.000000
 -6.372019 4.868045 0.000000
 -6.027027 5.282989 0.000000
 -5.674086 5.656598 0.000000
 -5.251192 6.049285 0.000000
 -4.882353 6.343402 0.000000
 -4.389507 6.669316 0.000000
 -4.000000 6.923688 0.000000
 -3.486486 7.192369 0.000000
 -3.023847 7.400636 0.000000
 -2.523052 7.575517 0.000000
 -2.082671 7.713831 0.000000
 -1.507154 7.841017 0.000000
 -1.011129 7.922099 0.000000
 -0.484897 7.966614 0.000000
 0.012719 7.985692 0.000000
 0.561208 7.960254 0.000000
 1.055644 7.899841 0.000000
 1.597774 7.817170 0.000000
 2.089030 7.699523 0.000000
 2.561208 7.537361 0.000000
 3.065183 7.359300 0.000000
 3.564388 7.143084 0.000000
 4.006359 6.906200 0.000000
 4.453100 6.618442 0.000000
 4.872814 6.308426 0.000000
 5.278219 5.979332 0.000000
 5.637520 5.629571 0.000000
 6.015898 5.228935 0.000000
 6.329094 4.853736 0.000000
 6.642289 4.413355 0.000000
 6.925278 3.965024 0.000000
 7.147854 3.545310 0.000000
 7.379968 3.050874 0.000000
 7.548490 2.588235 0.000000
 7.696343 2.079491 0.000000
 7.828299 1.548490 0.000000
 7.914149 1.055644 0.000000
 7.960254 0.545310 0.000000
 7.979332 0.004769 0.000000
 7.993641 0.019078 0.000000
 8.019116 0.017435 0.000000
 7.987990 -0.559623 0.000000
 7.939419 -1.109625 0.000000
 7.847946 -1.645251 0.000000
 7.732717 -2.123606 0.000000
 7.587273 -2.606682 0.000000
 7.406892 -3.065854 0.000000
 7.178726 -3.580595 0.000000
 6.947528 -4.003121 0.000000
 6.643109 -4.481174 0.000000
 6.364258 -4.878187 0.000000
 6.018605 -5.292581 0.000000
 5.665070 -5.665628 0.000000
 5.241551 -6.057641 0.000000
 4.872244 -6.351170 0.000000
 4.378880 -6.676299 0.000000
 3.988968 -6.930050 0.000000
 3.475027 -7.197913 0.000000
 3.012057 -7.405443 0.000000
 2.510984 -7.579526 0.000000
 2.070383 -7.717138 0.000000
 1.494664 -7.843407 0.000000
 0.998511 -7.923699 0.000000
 0.472208 -7.967376 0.000000
 -0.025437 -7.985662 0.000000
 -0.573885 -7.959350 0.000000
 -1.068224 -7.898150 0.000000
 -1.610222 -7.814615 0.000000
 -2.101290 -7.696186 0.000000
 -2.573209 -7.533272 0.000000
 -3.076900 -7.354409 0.000000
 -3.575760 -7.137398 0.000000
 -4.017353 -6.899811 0.000000
 -4.463635 -6.611341 0.000000
 -4.882855 -6.300657 0.000000
 -5.287735 -5.970918 0.000000
 -5.646479 -5.620585 0.000000
 -6.024218 -5.219347 0.000000
 -6.336816 -4.843650 0.000000
 -6.649310 -4.402771 0.000000
 -6.931584 -3.953989 0.000000
 -7.153491 -3.533921 0.000000
 -7.384818 -3.039116 0.000000
 -7.552603 -2.576210 0.000000
 -7.699645 -2.067231 0.000000
 -7.830755 -1.536020 0.000000
 -7.915820 -1.043038 0.000000
 -7.961112 -0.532631 0.000000
 -7.979329 0.007939 0.000000
 -7.993661 -0.006347 0.000000
 -8.041426 -0.014340 0.000000
 -0.007967 0.004780 0.000000
 -7.432782 3.047998 0.000000
 -0.001593 0.007967 0.000000
 -5.689703 5.672177 0.000000
 -0.006373 0.003187 0.000000
 -3.041625 7.412069 0.000000
 -0.001593 0.011153 0.000000
 0.015933 7.996813 0.000000
 0.000000 0.009560 0.000000
 3.044812 7.381796 0.000000
 -0.007967 0.000000 0.000000
 5.654650 5.640311 0.000000
 -0.009560 0.003187 0.000000
 7.375423 3.052778 0.000000
 -0.004780 0.000000 0.000000
 8.041439 0.001533 0.000000
 0.007959 -0.004793 0.000000
 7.427918 -3.059832 0.000000
 0.001580 -0.007970 0.000000
 5.680662 -5.681232 0.000000
 0.006368 -0.003197 0.000000
 3.029816 -7.416904 0.000000
 0.001575 -0.011156 0.000000
 -0.028669 -7.996777 0.000000
 -0.000015 -0.009560 0.000000
 -3.056565 -7.376937 0.000000
 0.007967 -0.000013 0.000000
 -5.663626 -5.631298 0.000000
 0.009555 -0.003202 0.000000
 -7.380276 -3.041028 0.000000
 0.004780 -0.000008 0.000000
 -8.019078 -0.000024 -0.030207
 -7.988871 0.000436 0.546900
 -7.941176 0.000874 1.096979
 -7.850556 0.001300 1.632749
 -7.736089 0.001681 2.111287
 -7.591415 0.002066 2.594594
 -7.411765 0.002432 3.054053
 -7.184420 0.002842 3.569156
 -6.953895 0.003179 3.992050
 -6.650238 0.003560 4.470587
 -6.372019 0.003877 4.868043
 -6.027027 0.004207 5.282987
 -5.674086 0.004505 5.656596
 -5.251192 0.004817 6.049283
 -4.882353 0.005051 6.343400
 -4.389507 0.005311 6.669314
 -4.000000 0.005514 6.923686
 -3.486486 0.005727 7.192367
 -3.023847 0.005893 7.400634
 -2.523052 0.006033 7.575515
 -2.082671 0.006143 7.713829
 -1.507154 0.006244 7.841015
 -1.011129 0.006309 7.922096
 -0.484897 0.006344 7.966611
 0.012719 0.006359 7.985689
 0.561208 0.006339 7.960251
 1.055644 0.006291 7.899838
 1.597774 0.006225 7.817168
 2.089030 0.006131 7.699521
 2.561208 0.006002 7.537359
 3.065183 0.005860 7.359298
 3.564388 0.005688 7.143082
 4.006359 0.005500 6.906198
 4.453100 0.005270 6.618440
 4.872814 0.005024 6.308424
 5.278219 0.004762 5.979330
 5.637520 0.004483 5.629569
 6.015898 0.004164 5.228933
 6.329094 0.003865 4.853734
 6.642289 0.003514 4.413354
 6.925278 0.003157 3.965023
 7.147854 0.002823 3.545309
 7.379968 0.002429 3.050873
 7.548490 0.002061 2.588234
 7.696343 0.001656 2.079490
 7.828299 0.001233 1.548490
 7.914149 0.000841 1.055644
 7.960254 0.000434 0.545310
 7.979332 0.000004 0.004769
 7.993641 0.000015 0.019078
 0.000019 -8.019100 -0.023821
 -0.000441 -7.988433 0.553261
 -0.000879 -7.940300 1.103302
 -0.001305 -7.849253 1.639001
 -0.001686 -7.734405 2.117447
 -0.002071 -7.589346 2.600639
 -0.002437 -7.409331 3.059954
 -0.002847 -7.181576 3.574876
 -0.003183 -6.950714 3.997586
 -0.003564 -6.646676 4.475881
 -0.003881 -6.368140 4.873116
 -0.004211 -6.022818 5.287785
 -0.004508 -5.669580 5.661113
 -0.004821 -5.246373 6.053463
 -0.005055 -4.877300 6.347286
 -0.005314 -4.384195 6.672807
 -0.005516 -3.994485 6.926869
 -0.005730 -3.480757 7.195141
 -0.005895 -3.017953 7.403039
 -0.006034 -2.517019 7.577521
 -0.006144 -2.076528 7.715485
 -0.006245 -1.500910 7.842212
 -0.006309 -1.004820 7.922899
 -0.006344 -0.478553 7.966995
 -0.006359 0.019078 7.985677
 -0.006339 0.567547 7.959802
 -0.006290 1.061935 7.898995
 -0.006224 1.603999 7.815893
 -0.006130 2.095161 7.697855
 -0.006001 2.567209 7.535317
 -0.005858 3.071042 7.356854
 -0.005686 3.570075 7.140241
 -0.005497 4.011857 6.903005
 -0.005268 4.458369 6.614892
 -0.005020 4.877836 6.304542
 -0.004758 5.282979 5.975125
 -0.004479 5.642001 5.625078
 -0.004160 6.020060 5.224141
 -0.003861 6.332957 4.848693
 -0.003510 6.645801 4.408063
 -0.003153 6.928433 3.959507
 -0.002819 7.150675 3.539616
 -0.002425 7.382395 3.044995
 -0.002056 7.550549 2.582222
 -0.001651 7.697997 2.073361
 -0.001228 7.829530 1.542255
 -0.000836 7.914987 1.049341
 -0.000429 7.960686 0.538971
 0.000001 7.979333 -0.001585
 -0.000010 7.993654 0.012712
 5.668115 -5.672604 -0.023821
 5.646114 -5.651236 0.553261
 5.611782 -5.617496 1.103302
 5.547127 -5.553392 1.639001
 5.465680 -5.472419 2.117447
 5.362876 -5.370078 2.600639
 5.235378 -5.242996 3.059954
 5.074105 -5.082175 3.574876
 4.910688 -4.919103 3.997586
 4.695517 -4.704300 4.475881
 4.498416 -4.507491 4.873116
 4.254101 -4.263447 5.287785
 4.004213 -4.013781 5.661113
 3.704858 -3.714630 6.053463
 3.443823 -3.453718 6.347286
 3.095100 -3.105084 6.672807
 2.819501 -2.829551 6.926869
 2.456233 -2.466297 7.195141
 2.128995 -2.139031 7.403039
 1.774824 -1.784775 7.577521
 1.463396 -1.473254 7.715485
 1.056463 -1.066140 7.842212
 0.705769 -0.715257 7.922899
 0.333766 -0.343007 7.966995
 -0.017983 0.009001 7.985677
 -0.405641 0.396996 7.959802
 -0.755052 0.746754 7.898995
 -1.138150 1.130251 7.815893
 -1.485249 1.477759 7.697855
 -1.818813 1.811772 7.535317
 -2.174834 2.168279 7.356854
 -2.527441 2.521410 7.140241
 -2.839570 2.834055 6.903005
 -3.155014 3.150074 6.614892
 -3.451328 3.446976 6.304542
 -3.737508 3.733754 5.975125
 -3.991077 3.987919 5.625078
 -4.258073 4.255579 5.224141
 -4.479025 4.477130 4.848693
 -4.699902 4.698681 4.408063
 -4.899421 4.898864 3.959507
 -5.056271 5.056311 3.539616
 -5.219778 5.220506 3.044995
 -5.338373 5.339717 2.582222
 -5.442306 5.444306 2.073361
 -5.534978 5.537650 1.542255
 -5.595103 5.598378 1.049341
 -5.627117 5.630993 0.538971
 -5.639993 5.644487 -0.001585
 -5.650123 5.654610 0.012712
 -5.668088 -5.672631 -0.023821
 -5.646738 -5.650612 0.553261
 -5.613026 -5.616254 1.103302
 -5.548973 -5.551547 1.639001
 -5.468065 -5.470036 2.117447
 -5.365806 -5.367150 2.600639
 -5.238826 -5.239551 3.059954
 -5.078133 -5.078150 3.574876
 -4.915191 -4.914604 3.997586
 -4.700559 -4.699262 4.475881
 -4.503907 -4.502004 4.873116
 -4.260058 -4.257494 5.287785
 -4.010591 -4.007408 5.661113
 -3.711679 -3.707815 6.053463
 -3.450974 -3.446572 6.347286
 -3.102618 -3.097572 6.672807
 -2.827305 -2.821753 6.926869
 -2.464340 -2.458197 7.195141
 -2.137335 -2.130698 7.403039
 -1.783361 -1.776245 7.577521
 -1.472088 -1.464569 7.715485
 -1.065299 -1.057312 7.842212
 -0.714695 -0.706339 7.922899
 -0.342741 -0.334039 7.966995
 0.008987 0.017990 7.985677
 0.396672 0.405957 7.959802
 0.746153 0.755646 7.898995
 1.129344 1.139049 7.815893
 1.476576 1.486425 7.697855
 1.810323 1.820255 7.535317
 2.166546 2.176560 7.356854
 2.519397 2.529448 7.140241
 2.831793 2.841826 6.903005
 3.147561 3.157521 6.614892
 3.444226 3.454072 6.304542
 3.730777 3.740480 5.975125
 3.984740 3.994251 5.625078
 4.252187 4.261460 5.224141
 4.473562 4.482589 4.848693
 4.694937 4.703643 4.408063
 4.894961 4.903321 3.959507
 5.052283 5.060296 3.539616
 5.216347 5.223934 3.044995
 5.335464 5.342623 2.582222
 5.439970 5.446640 2.073361
 5.533240 5.539386 1.542255
 5.593921 5.599560 1.049341
 5.626510 5.631599 0.538971
 5.639994 5.644486 -0.001585
 5.650109 5.654624 0.012712
 -3.131792 -7.382265 -0.023821
 -3.120239 -7.353854 0.553261
 -3.101844 -7.309373 1.103302
 -3.066678 -7.225390 1.639001
 -3.022176 -7.119514 2.117447
 -2.965878 -6.985824 2.600639
 -2.895912 -6.819962 3.059954
 -2.807341 -6.610135 3.574876
 -2.717488 -6.397475 3.997586
 -2.599099 -6.117434 4.475881
 -2.490610 -5.860894 4.873116
 -2.356051 -5.542867 5.287785
 -2.218369 -5.217566 5.661113
 -2.053377 -4.827846 6.053463
 -1.909453 -4.487992 6.347286
 -1.717112 -4.033946 6.672807
 -1.565099 -3.675106 6.926869
 -1.364663 -3.202093 7.195141
 -1.184070 -2.775978 7.403039
 -0.988561 -2.314772 7.577521
 -0.816631 -1.909220 7.715485
 -0.591920 -1.379275 7.842212
 -0.398234 -0.922558 7.922899
 -0.192736 -0.438071 7.966995
 0.001597 0.020046 7.985677
 0.215816 0.524951 7.959802
 0.408942 0.980057 7.898995
 0.620702 1.479047 7.815893
 0.812609 1.931166 7.697855
 0.997083 2.365676 7.535317
 1.193984 2.829441 7.356854
 1.389036 3.288776 7.140241
 1.561745 3.695400 6.903005
 1.736339 4.106362 6.614892
 1.900387 4.492420 6.304542
 2.058855 4.865286 5.975125
 2.199325 5.195687 5.625078
 2.347267 5.543598 5.224141
 2.469743 5.831529 4.848693
 2.592245 6.119391 4.408063
 2.702954 6.379438 3.959507
 2.790057 6.583900 3.539616
 2.880916 6.797064 3.044995
 2.946927 6.951720 2.582222
 3.004885 7.087300 2.073361
 3.056644 7.208222 1.542255
 3.090379 7.286740 1.049341
 3.108602 7.328650 0.538971
 3.116280 7.345649 -0.001585
 3.121863 7.358837 0.012712
 3.131827 -7.382251 -0.023821
 3.119427 -7.354199 0.553261
 3.100226 -7.310059 1.103302
 3.064276 -7.226409 1.639001
 3.019072 -7.120831 2.117447
 2.962065 -6.987442 2.600639
 2.891425 -6.821866 3.059954
 2.802099 -6.612358 3.574876
 2.711628 -6.399962 3.997586
 2.592537 -6.120218 4.475881
 2.483465 -5.863926 4.873116
 2.348298 -5.546157 5.287785
 2.210069 -5.221087 5.661113
 2.044500 -4.831612 6.053463
 1.900146 -4.491940 6.347286
 1.707328 -4.038097 6.672807
 1.554943 -3.679415 6.926869
 1.354113 -3.206568 7.195141
 1.173216 -2.780583 7.403039
 0.977451 -2.319485 7.577521
 0.805319 -1.914019 7.715485
 0.580422 -1.384153 7.842212
 0.386618 -0.927486 7.922899
 0.181056 -0.443026 7.966995
 -0.013305 0.015079 7.985677
 -0.227488 0.519999 7.959802
 -0.420523 0.975144 7.898995
 -0.632162 1.474186 7.815893
 -0.823895 1.926378 7.697855
 -1.008132 2.360989 7.535317
 -1.204769 2.824865 7.356854
 -1.399505 3.284335 7.140241
 -1.571866 3.691106 6.903005
 -1.746038 4.102247 6.614892
 -1.909630 4.488499 6.304542
 -2.067615 4.861570 5.975125
 -2.207572 5.192189 5.625078
 -2.354927 5.540348 5.224141
 -2.476851 5.828513 4.848693
 -2.598708 6.116650 4.408063
 -2.708759 6.376976 3.959507
 -2.795247 6.581699 3.539616
 -2.885381 6.795170 3.044995
 -2.950713 6.950114 2.582222
 -3.007925 7.086011 2.073361
 -3.058905 7.207263 1.542255
 -3.091919 7.286087 1.049341
 -3.109391 7.328315 0.538971
 -3.116278 7.345649 -0.001585
 -3.121881 7.358829 0.012712
 7.379769 -3.137670 -0.023821
 7.351367 -3.126094 0.553261
 7.306900 -3.107664 1.103302
 7.222945 -3.072431 1.639001
 7.117105 -3.027844 2.117447
 6.983460 -2.971441 2.600639
 6.817654 -2.901342 3.059954
 6.607897 -2.812604 3.574876
 6.395309 -2.722582 3.997586
 6.115362 -2.603970 4.475881
 5.858909 -2.495277 4.873116
 5.540989 -2.360464 5.287785
 5.215798 -2.222523 5.661113
 4.826209 -2.057220 6.053463
 4.486470 -1.913026 6.347286
 4.032577 -1.720324 6.672807
 3.673859 -1.568025 6.926869
 3.201005 -1.367212 7.195141
 2.775034 -1.186280 7.403039
 2.313984 -0.990404 7.577521
 1.908569 -0.818151 7.715485
 1.378804 -0.593018 7.842212
 0.922240 -0.398969 7.922899
 0.437917 -0.193085 7.966995
 -0.020045 0.001613 7.985677
 -0.524779 0.216234 7.959802
 -0.979731 0.409722 7.898995
 -1.478552 0.621880 7.815893
 -1.930519 0.814147 7.697855
 -2.364881 0.998967 7.535317
 -2.828489 1.196236 7.356854
 -3.287669 1.391655 7.140241
 -3.694155 1.564688 6.903005
 -4.104978 1.739608 6.614892
 -4.490905 1.903964 6.304542
 -4.863645 2.062728 5.975125
 -5.193934 2.203462 5.625078
 -5.541727 2.351681 5.224141
 -5.829560 2.474386 4.848693
 -6.117325 2.597117 4.408063
 -6.377284 2.708033 3.959507
 -6.581677 2.795299 3.539616
 -6.794768 2.886328 3.044995
 -6.949371 2.952462 2.582222
 -7.084905 3.010528 2.073361
 -7.205786 3.062383 1.542255
 -7.284276 3.096181 1.049341
 -7.326173 3.114437 0.538971
 -7.343165 3.122128 -0.001585
 -7.356348 3.127722 0.012712
 -7.379754 -3.137705 -0.023821
 -7.351712 -3.125282 0.553261
 -7.307588 -3.106046 1.103302
 -7.223967 -3.070029 1.639001
 -7.118424 -3.024741 2.117447
 -6.985081 -2.967629 2.600639
 -6.819561 -2.896856 3.059954
 -6.610125 -2.807364 3.574876
 -6.397800 -2.716724 3.997586
 -6.118151 -2.597410 4.475881
 -5.861946 -2.488134 4.873116
 -5.544285 -2.352713 5.287785
 -5.219326 -2.214226 5.661113
 -4.829982 -2.048347 6.053463
 -4.490426 -1.903722 6.347286
 -4.036736 -1.710543 6.672807
 -3.678175 -1.557873 6.926869
 -3.205489 -1.356666 7.195141
 -2.779647 -1.175430 7.403039
 -2.318706 -0.979298 7.577521
 -1.913377 -0.806843 7.715485
 -1.383691 -0.581524 7.842212
 -0.927177 -0.387357 7.922899
 -0.442882 -0.181408 7.966995
 0.015069 0.013317 7.985677
 0.519818 0.227902 7.959802
 0.974809 0.421299 7.898995
 1.473682 0.633335 7.815893
 1.925722 0.825429 7.697855
 2.360185 1.010012 7.535317
 2.823905 1.207018 7.356854
 3.283219 1.402120 7.140241
 3.689853 1.574805 6.903005
 4.100856 1.749304 6.614892
 4.486977 1.913204 6.304542
 4.859922 2.071486 5.975125
 5.190429 2.211706 5.625078
 5.538471 2.359338 5.224141
 5.826539 2.481492 4.848693
 6.114578 2.603578 4.408063
 6.374817 2.713836 3.959507
 6.579471 2.800487 3.539616
 6.792870 2.890791 3.044995
 6.947762 2.956246 2.582222
 7.083613 3.013567 2.073361
 7.204825 3.064643 1.542255
 7.283622 3.097720 1.049341
 7.325837 3.115226 0.538971
 7.343166 3.122127 -0.001585
 7.356340 3.127740 0.012712
 507
 0 1
 2 3
 3 4
 4 5
 5 6
 6 7
 7 8
 8 9
 9 10
 10 11
 11 12
 12 13
 13 14
 14 15
 15 16
 16 17
 17 18
 18 19
 19 20
 20 21
 21 22
 22 23
 23 24
 24 25
 25 26
 26 27
 27 28
 28 29
 29 30
 30 31
 31 32
 32 33
 33 34
 34 35
 35 36
 36 37
 37 38
 38 39
 39 40
 40 41
 41 42
 42 43
 43 44
 44 45
 45 46
 46 47
 47 48
 48 49
 49 50
 50 51
 52 53
 53 54
 54 55
 55 56
 56 57
 57 58
 58 59
 59 60
 60 61
 61 62
 62 63
 63 64
 64 65
 65 66
 66 67
 67 68
 68 69
 69 70
 70 71
 71 72
 72 73
 73 74
 74 75
 75 76
 76 77
 77 78
 78 79
 79 80
 80 81
 81 82
 82 83
 83 84
 84 85
 85 86
 86 87
 87 88
 88 89
 89 90
 90 91
 91 92
 92 93
 93 94
 94 95
 95 96
 96 97
 97 98
 98 99
 99 100
 100 101
 102 103
 104 105
 106 107
 108 109
 110 111
 112 113
 114 115
 116 117
 118 119
 120 121
 122 123
 124 125
 126 127
 128 129
 130 131
 132 133
 134 135
 135 136
 136 137
 137 138
 138 139
 139 140
 140 141
 141 142
 142 143
 143 144
 144 145
 145 146
 146 147
 147 148
 148 149
 149 150
 150 151
 151 152
 152 153
 153 154
 154 155
 155 156
 156 157
 157 158
 158 159
 159 160
 160 161
 161 162
 162 163
 163 164
 164 165
 165 166
 166 167
 167 168
 168 169
 169 170
 170 171
 171 172
 172 173
 173 174
 174 175
 175 176
 176 177
 177 178
 178 179
 179 180
 180 181
 181 182
 182 183
 184 185
 185 186
 186 187
 187 188
 188 189
 189 190
 190 191
 191 192
 192 193
 193 194
 194 195
 195 196
 196 197
 197 198
 198 199
 199 200
 200 201
 201 202
 202 203
 203 204
 204 205
 205 206
 206 207
 207 208
 208 209
 209 210
 210 211
 211 212
 212 213
 213 214
 214 215
 215 216
 216 217
 217 218
 218 219
 219 220
 220 221
 221 222
 222 223
 223 224
 224 225
 225 226
 226 227
 227 228
 228 229
 229 230
 230 231
 231 232
 232 233
 234 235
 235 236
 236 237
 237 238
 238 239
 239 240
 240 241
 241 242
 242 243
 243 244
 244 245
 245 246
 246 247
 247 248
 248 249
 249 250
 250 251
 251 252
 252 253
 253 254
 254 255
 255 256
 256 257
 257 258
 258 259
 259 260
 260 261
 261 262
 262 263
 263 264
 264 265
 265 266
 266 267
 267 268
 268 269
 269 270
 270 271
 271 272
 272 273
 273 274
 274 275
 275 276
 276 277
 277 278
 278 279
 279 280
 280 281
 281 282
 282 283
 284 285
 285 286
 286 287
 287 288
 288 289
 289 290
 290 291
 291 292
 292 293
 293 294
 294 295
 295 296
 296 297
 297 298
 298 299
 299 300
 300 301
 301 302
 302 303
 303 304
 304 305
 305 306
 306 307
 307 308
 308 309
 309 310
 310 311
 311 312
 312 313
 313 314
 314 315
 315 316
 316 317
 317 318
 318 319
 319 320
 320 321
 321 322
 322 323
 323 324
 324 325
 325 326
 326 327
 327 328
 328 329
 329 330
 330 331
 331 332
 332 333
 334 335
 335 336
 336 337
 337 338
 338 339
 339 340
 340 341
 341 342
 342 343
 343 344
 344 345
 345 346
 346 347
 347 348
 348 349
 349 350
 350 351
 351 352
 352 353
 353 354
 354 355
 355 356
 356 357
 357 358
 358 359
 359 360
 360 361
 361 362
 362 363
 363 364
 364 365
 365 366
 366 367
 367 368
 368 369
 369 370
 370 371
 371 372
 372 373
 373 374
 374 375
 375 376
 376 377
 377 378
 378 379
 379 380
 380 381
 381 382
 382 383
 384 385
 385 386
 386 387
 387 388
 388 389
 389 390
 390 391
 391 392
 392 393
 393 394
 394 395
 395 396
 396 397
 397 398
 398 399
 399 400
 400 401
 401 402
 402 403
 403 404
 404 405
 405 406
 406 407
 407 408
 408 409
 409 410
 410 411
 411 412
 412 413
 413 414
 414 415
 415 416
 416 417
 417 418
 418 419
 419 420
 420 421
 421 422
 422 423
 423 424
 424 425
 425 426
 426 427
 427 428
 428 429
 429 430
 430 431
 431 432
 432 433
 434 435
 435 436
 436 437
 437 438
 438 439
 439 440
 440 441
 441 442
 442 443
 443 444
 444 445
 445 446
 446 447
 447 448
 448 449
 449 450
 450 451
 451 452
 452 453
 453 454
 454 455
 455 456
 456 457
 457 458
 458 459
 459 460
 460 461
 461 462
 462 463
 463 464
 464 465
 465 466
 466 467
 467 468
 468 469
 469 470
 470 471
 471 472
 472 473
 473 474
 474 475
 475 476
 476 477
 477 478
 478 479
 479 480
 480 481
 481 482
 482 483
 484 485
 485 486
 486 487
 487 488
 488 489
 489 490
 490 491
 491 492
 492 493
 493 494
 494 495
 495 496
 496 497
 497 498
 498 499
 499 500
 500 501
 501 502
 502 503
 503 504
 504 505
 505 506
 506 507
 507 508
 508 509
 509 510
 510 511
 511 512
 512 513
 513 514
 514 515
 515 516
 516 517
 517 518
 518 519
 519 520
 520 521
 521 522
 522 523
 523 524
 524 525
 525 526
 526 527
 527 528
 528 529
 529 530
 530 531
 531 532
 532 533
----------------------
arrows.xsp
 190
 -2.300723 3.185383 0.000000
 5.188428 3.175485 0.000000
 5.172440 -3.311762 0.000000
 -2.306053 -3.285116 0.000000
 -2.282451 3.170156 0.000000
 0.008505 0.004860 0.000000
 0.336574 0.189550 0.000000
 0.986634 0.181045 0.000000
 1.631835 0.191981 0.000000
 2.343864 0.177400 0.000000
 3.030377 0.196841 0.000000
 3.569866 0.184690 0.000000
 4.059538 0.194411 0.000000
 4.678007 0.187120 0.000000
 5.258809 0.190765 0.000000
 5.877278 0.195626 0.000000
 6.545565 0.193196 0.000000
 7.080194 0.188335 0.000000
 7.653706 0.190765 0.000000
 8.174970 0.190765 0.000000
 8.662211 0.190765 0.000000
 8.419198 0.756987 0.000000
 9.138518 0.388821 0.000000
 9.868773 0.004860 0.000000
 9.235723 -0.351154 0.000000
 8.420413 -0.811665 0.000000
 8.695018 -0.170109 0.000000
 8.250304 -0.177400 0.000000
 7.657351 -0.173755 0.000000
 7.128797 -0.162819 0.000000
 6.541920 -0.174970 0.000000
 5.950182 -0.170109 0.000000
 5.270960 -0.168894 0.000000
 4.691373 -0.164034 0.000000
 4.077764 -0.161604 0.000000
 3.550425 -0.161604 0.000000
 3.035237 -0.177400 0.000000
 2.329283 -0.168894 0.000000
 1.630620 -0.165249 0.000000
 0.942892 -0.177400 0.000000
 0.331713 -0.168894 0.000000
 0.003645 0.004860 0.000000
 0.008505 0.004860 0.000000
 0.336574 0.189550 0.000000
 0.986634 0.181045 0.000000
 1.631835 0.191981 0.000000
 2.343864 0.177400 0.000000
 3.030377 0.196841 0.000000
 3.569866 0.184690 0.000000
 4.059538 0.194411 0.000000
 4.678007 0.187120 0.000000
 5.258809 0.190765 0.000000
 5.877278 0.195626 0.000000
 6.545565 0.193196 0.000000
 7.080194 0.188335 0.000000
 7.653706 0.190765 0.000000
 8.174970 0.190765 0.000000
 8.662211 0.190765 0.000000
 8.419198 0.756987 0.000000
 9.138518 0.388821 0.000000
 9.868773 0.004860 0.000000
 9.235723 -0.351154 0.000000
 8.420413 -0.811665 0.000000
 8.695018 -0.170109 0.000000
 8.250304 -0.177400 0.000000
 7.657351 -0.173755 0.000000
 7.128797 -0.162819 0.000000
 6.541920 -0.174970 0.000000
 5.950182 -0.170109 0.000000
 5.270960 -0.168894 0.000000
 4.691373 -0.164034 0.000000
 4.077764 -0.161604 0.000000
 3.550425 -0.161604 0.000000
 3.035237 -0.177400 0.000000
 2.329283 -0.168894 0.000000
 1.630620 -0.165249 0.000000
 0.942892 -0.177400 0.000000
 0.331713 -0.168894 0.000000
 0.003645 0.004860 0.000000
 -0.004853 0.008509 0.000000
 -0.189282 0.336725 0.000000
 -0.180259 0.986778 0.000000
 -0.190681 1.631987 0.000000
 -0.175533 2.344005 0.000000
 -0.194428 3.030533 0.000000
 -0.181847 3.570012 0.000000
 -0.191178 4.059692 0.000000
 -0.183395 4.678155 0.000000
 -0.186577 5.258959 0.000000
 -0.190946 5.877432 0.000000
 -0.187984 6.545717 0.000000
 -0.182697 7.080342 0.000000
 -0.184670 7.653855 0.000000
 -0.184255 8.175119 0.000000
 -0.183867 8.662360 0.000000
 -0.750282 8.419798 0.000000
 -0.381544 9.138825 0.000000
 0.002999 9.868774 0.000000
 0.358509 9.235440 0.000000
 0.818370 8.419764 0.000000
 0.177033 8.694880 0.000000
 0.183970 8.250160 0.000000
 0.179853 7.657210 0.000000
 0.168496 7.128665 0.000000
 0.180179 6.541779 0.000000
 0.174847 5.950045 0.000000
 0.173091 5.270824 0.000000
 0.167770 4.691241 0.000000
 0.164851 4.077634 0.000000
 0.164431 3.550295 0.000000
 0.179817 3.035095 0.000000
 0.170749 2.329148 0.000000
 0.166547 1.630488 0.000000
 0.178151 0.942750 0.000000
 0.169158 0.331578 0.000000
 -0.004857 0.003649 0.000000
 0.000007 0.004860 -0.008505
 0.000268 0.189550 -0.336574
 0.000786 0.181045 -0.986634
 0.001299 0.191981 -1.631834
 0.001866 0.177400 -2.343863
 0.002413 0.196841 -3.030376
 0.002843 0.184690 -3.569865
 0.003233 0.194411 -4.059537
 0.003725 0.187120 -4.678006
 0.004188 0.190765 -5.258807
 0.004680 0.195626 -5.877276
 0.005212 0.193196 -6.545563
 0.005638 0.188335 -7.080192
 0.006095 0.190765 -7.653704
 0.006510 0.190765 -8.174967
 0.006898 0.190765 -8.662208
 0.006704 0.756987 -8.419195
 0.007277 0.388821 -9.138515
 0.007859 0.004860 -9.868770
 0.007355 -0.351154 -9.235720
 0.006705 -0.811665 -8.420410
 0.006924 -0.170109 -8.695015
 0.006570 -0.177400 -8.250301
 0.006098 -0.173755 -7.657349
 0.005677 -0.162819 -7.128795
 0.005210 -0.174970 -6.541918
 0.004738 -0.170109 -5.950180
 0.004197 -0.168894 -5.270958
 0.003736 -0.164034 -4.691372
 0.003247 -0.161604 -4.077763
 0.002827 -0.161604 -3.550424
 0.002417 -0.177400 -3.035236
 0.001855 -0.168894 -2.329282
 0.001299 -0.165249 -1.630619
 0.000751 -0.177400 -0.942892
 0.000264 -0.168894 -0.331713
 0.000003 0.004860 -0.003645
 0.002766 0.007725 -0.005350
 0.111006 0.303418 -0.211723
 0.534784 0.578818 -0.620644
 0.944564 0.868227 -1.026509
 1.411684 1.165515 -1.474413
 1.843340 1.479927 -1.906265
 2.197883 1.704260 -2.245632
 2.508089 1.925084 -2.553661
 2.910825 2.187764 -2.942711
 3.283170 2.443147 -3.308065
 3.679114 2.715903 -3.697115
 4.111246 3.004260 -4.117502
 4.458582 3.232527 -4.453811
 4.826906 3.483734 -4.814580
 5.162909 3.710224 -5.142483
 5.476982 3.921932 -5.448983
 5.003851 4.285857 -5.296115
 5.673304 4.293117 -5.748605
 6.358635 4.292032 -6.207973
 6.149566 3.721761 -5.809752
 5.881422 2.985649 -5.296879
 5.699837 3.636948 -5.469620
 5.417253 3.437673 -5.189872
 5.033001 3.183056 -4.816873
 4.686186 2.962466 -4.484385
 4.314680 2.697391 -4.115209
 3.930533 2.444311 -3.742975
 3.492031 2.150195 -3.315709
 3.115716 1.902393 -2.951118
 2.718829 1.637794 -2.565126
 2.378910 1.408664 -2.233403
 2.055652 1.171716 -1.909322
 1.595844 0.872030 -1.465241
 1.143453 0.571482 -1.025745
 0.706939 0.262587 -0.593128
 0.308222 0.004082 -0.208665
 -0.000367 0.005614 -0.002293
 184
 0 1
 1 2
 2 3
 3 4
 5 6
 6 7
 7 8
 8 9
 9 10
 10 11
 11 12
 12 13
 13 14
 14 15
 15 16
 16 17
 17 18
 18 19
 19 20
 20 21
 21 22
 22 23
 23 24
 24 25
 25 26
 26 27
 27 28
 28 29
 29 30
 30 31
 31 32
 32 33
 33 34
 34 35
 35 36
 36 37
 37 38
 38 39
 39 40
 40 41
 42 43
 43 44
 44 45
 45 46
 46 47
 47 48
 48 49
 49 50
 50 51
 51 52
 52 53
 53 54
 54 55
 55 56
 56 57
 57 58
 58 59
 59 60
 60 61
 61 62
 62 63
 63 64
 64 65
 65 66
 66 67
 67 68
 68 69
 69 70
 70 71
 71 72
 72 73
 73 74
 74 75
 75 76
 76 77
 77 78
 79 80
 80 81
 81 82
 82 83
 83 84
 84 85
 85 86
 86 87
 87 88
 88 89
 89 90
 90 91
 91 92
 92 93
 93 94
 94 95
 95 96
 96 97
 97 98
 98 99
 99 100
 100 101
 101 102
 102 103
 103 104
 104 105
 105 106
 106 107
 107 108
 108 109
 109 110
 110 111
 111 112
 112 113
 113 114
 114 115
 116 117
 117 118
 118 119
 119 120
 120 121
 121 122
 122 123
 123 124
 124 125
 125 126
 126 127
 127 128
 128 129
 129 130
 130 131
 131 132
 132 133
 133 134
 134 135
 135 136
 136 137
 137 138
 138 139
 139 140
 140 141
 141 142
 142 143
 143 144
 144 145
 145 146
 146 147
 147 148
 148 149
 149 150
 150 151
 151 152
 153 154
 154 155
 155 156
 156 157
 157 158
 158 159
 159 160
 160 161
 161 162
 162 163
 163 164
 164 165
 165 166
 166 167
 167 168
 168 169
 169 170
 170 171
 171 172
 172 173
 173 174
 174 175
 175 176
 176 177
 177 178
 178 179
 179 180
 180 181
 181 182
 182 183
 183 184
 184 185
 185 186
 186 187
 187 188
 188 189
---------------------
title.xsp
 1800
 2.208214 0.529768 0.000000
 2.240688 0.538682 0.000000
 2.267431 0.562241 0.000000
 2.297358 0.578797 0.000000
 2.310092 0.592805 0.000000
 2.328558 0.616364 0.000000
 2.352754 0.614454 0.000000
 2.284623 0.308819 0.000000
 2.240051 0.309456 0.000000
 2.290990 0.526584 0.000000
 2.262337 0.513212 0.000000
 2.233047 0.499841 0.000000
 2.208214 0.499841 0.000000
 2.207577 0.525947 0.000000
 2.398599 0.371856 0.000000
 2.436804 0.375677 0.000000
 2.447628 0.358485 0.000000
 2.459726 0.340656 0.000000
 2.480102 0.341929 0.000000
 2.494747 0.341929 0.000000
 2.511939 0.353391 0.000000
 2.525947 0.366125 0.000000
 2.539319 0.383317 0.000000
 2.552690 0.413244 0.000000
 2.556511 0.427252 0.000000
 2.532315 0.411971 0.000000
 2.503025 0.406877 0.000000
 2.475645 0.404967 0.000000
 2.452085 0.414518 0.000000
 2.436804 0.425979 0.000000
 2.424706 0.448902 0.000000
 2.416428 0.482012 0.000000
 2.418975 0.511939 0.000000
 2.426616 0.542502 0.000000
 2.438077 0.569245 0.000000
 2.460363 0.592168 0.000000
 2.488379 0.608723 0.000000
 2.525310 0.611907 0.000000
 2.546323 0.610634 0.000000
 2.569245 0.599809 0.000000
 2.587074 0.588984 0.000000
 2.601082 0.555874 0.000000
 2.602993 0.529131 0.000000
 2.607450 0.500478 0.000000
 2.604266 0.464820 0.000000
 2.601082 0.428526 0.000000
 2.590258 0.396689 0.000000
 2.576886 0.368672 0.000000
 2.557784 0.343203 0.000000
 2.538682 0.324737 0.000000
 2.515759 0.311366 0.000000
 2.495384 0.300541 0.000000
 2.459089 0.302451 0.000000
 2.435530 0.310092 0.000000
 2.417065 0.324101 0.000000
 2.403056 0.350207 0.000000
 2.398599 0.372493 0.000000
 2.519580 0.571792 0.000000
 2.539319 0.566699 0.000000
 2.556511 0.557147 0.000000
 2.560968 0.538045 0.000000
 2.570519 0.524037 0.000000
 2.566062 0.506208 0.000000
 2.559058 0.482649 0.000000
 2.545049 0.456543 0.000000
 2.529131 0.446355 0.000000
 2.501751 0.441261 0.000000
 2.482649 0.446991 0.000000
 2.467367 0.462910 0.000000
 2.461000 0.480739 0.000000
 2.457179 0.505571 0.000000
 2.460363 0.525310 0.000000
 2.469277 0.544413 0.000000
 2.480739 0.559694 0.000000
 2.490926 0.568609 0.000000
 2.506208 0.573066 0.000000
 2.517033 0.573703 0.000000
 2.635466 0.368672 0.000000
 2.662846 0.378860 0.000000
 2.674944 0.361668 0.000000
 2.687679 0.346387 0.000000
 2.700414 0.339382 0.000000
 2.715696 0.339382 0.000000
 2.735435 0.345750 0.000000
 2.751353 0.357211 0.000000
 2.762814 0.369946 0.000000
 2.773002 0.389685 0.000000
 2.780643 0.404330 0.000000
 2.788284 0.434257 0.000000
 2.766635 0.418975 0.000000
 2.746259 0.411334 0.000000
 2.719516 0.407514 0.000000
 2.695957 0.410060 0.000000
 2.671124 0.422795 0.000000
 2.661573 0.439351 0.000000
 2.650748 0.468641 0.000000
 2.650111 0.497294 0.000000
 2.652658 0.528494 0.000000
 2.662846 0.553327 0.000000
 2.668577 0.567335 0.000000
 2.685769 0.591531 0.000000
 2.685769 0.592168 0.000000
 2.694683 0.597899 0.000000
 2.714422 0.608087 0.000000
 2.734798 0.610634 0.000000
 2.750080 0.613817 0.000000
 2.775549 0.611907 0.000000
 2.800382 0.602356 0.000000
 2.824578 0.587711 0.000000
 2.836039 0.556511 0.000000
 2.839860 0.533588 0.000000
 2.839860 0.511302 0.000000
 2.839860 0.484559 0.000000
 2.834766 0.459089 0.000000
 2.827762 0.429799 0.000000
 2.820121 0.399873 0.000000
 2.811843 0.378223 0.000000
 2.793378 0.348297 0.000000
 2.778733 0.326011 0.000000
 2.759631 0.313913 0.000000
 2.741802 0.305635 0.000000
 2.709328 0.301178 0.000000
 2.683222 0.299904 0.000000
 2.657752 0.316460 0.000000
 2.644381 0.338109 0.000000
 2.634193 0.378860 0.000000
 2.749443 0.569245 0.000000
 2.773002 0.566699 0.000000
 2.791468 0.560968 0.000000
 2.797835 0.541229 0.000000
 2.805476 0.524037 0.000000
 2.796562 0.496020 0.000000
 2.783827 0.465457 0.000000
 2.772365 0.448902 0.000000
 2.744349 0.439351 0.000000
 2.713785 0.442534 0.000000
 2.695957 0.460363 0.000000
 2.690226 0.481375 0.000000
 2.689589 0.508118 0.000000
 2.694046 0.536772 0.000000
 2.701051 0.552053 0.000000
 2.709965 0.560331 0.000000
 2.727794 0.569882 0.000000
 2.750716 0.575613 0.000000
 3.088188 0.543139 0.000000
 3.081184 0.568609 0.000000
 3.067813 0.592168 0.000000
 3.041706 0.609360 0.000000
 3.019421 0.613181 0.000000
 2.983763 0.607450 0.000000
 2.967208 0.599172 0.000000
 2.944285 0.586437 0.000000
 2.932187 0.575613 0.000000
 2.917542 0.553964 0.000000
 2.901624 0.528494 0.000000
 2.892709 0.497294 0.000000
 2.882521 0.468641 0.000000
 2.879338 0.445718 0.000000
 2.876154 0.400509 0.000000
 2.880611 0.369946 0.000000
 2.886342 0.346387 0.000000
 2.897803 0.321554 0.000000
 2.925820 0.308819 0.000000
 2.952563 0.301815 0.000000
 2.971028 0.301815 0.000000
 2.992677 0.302451 0.000000
 3.007959 0.306909 0.000000
 3.030245 0.318370 0.000000
 3.043617 0.335562 0.000000
 3.057625 0.355301 0.000000
 3.067176 0.375040 0.000000
 3.074817 0.403693 0.000000
 3.076090 0.423432 0.000000
 3.072270 0.447628 0.000000
 3.067176 0.469277 0.000000
 3.058898 0.490926 0.000000
 3.042980 0.512576 0.000000
 3.023241 0.520853 0.000000
 2.999045 0.522763 0.000000
 2.972302 0.518943 0.000000
 2.958294 0.513849 0.000000
 2.945559 0.507482 0.000000
 2.932824 0.499841 0.000000
 2.934734 0.512576 0.000000
 2.950653 0.537408 0.000000
 2.967208 0.555237 0.000000
 2.985037 0.566699 0.000000
 3.003502 0.572429 0.000000
 3.023241 0.573066 0.000000
 3.036613 0.566699 0.000000
 3.046164 0.555874 0.000000
 3.045527 0.543139 0.000000
 3.089462 0.539955 0.000000
 2.961477 0.471824 0.000000
 2.976122 0.478192 0.000000
 2.999682 0.475645 0.000000
 3.010506 0.476281 0.000000
 3.015600 0.473734 0.000000
 3.026425 0.466094 0.000000
 3.030245 0.455269 0.000000
 3.032155 0.443171 0.000000
 3.031519 0.425979 0.000000
 3.029608 0.407514 0.000000
 3.023878 0.391595 0.000000
 3.015600 0.376313 0.000000
 3.006686 0.359758 0.000000
 2.995861 0.347660 0.000000
 2.983126 0.340656 0.000000
 2.959567 0.335562 0.000000
 2.944922 0.335562 0.000000
 2.927730 0.345750 0.000000
 2.917542 0.365489 0.000000
 2.911812 0.396052 0.000000
 2.914358 0.417701 0.000000
 2.923910 0.442534 0.000000
 2.936008 0.457179 0.000000
 2.951289 0.469914 0.000000
 0.675143 0.610935 0.000000
 0.609027 0.312778 0.000000
 0.652257 0.303242 0.000000
 0.676414 0.420852 0.000000
 0.788938 0.431024 0.000000
 0.813732 0.435474 0.000000
 0.848697 0.454545 0.000000
 0.867133 0.474889 0.000000
 0.882390 0.501589 0.000000
 0.892562 0.527018 0.000000
 0.893198 0.552448 0.000000
 0.883662 0.581055 0.000000
 0.870312 0.595041 0.000000
 0.849332 0.605213 0.000000
 0.830261 0.613477 0.000000
 0.675779 0.609027 0.000000
 0.704387 0.575969 0.000000
 0.684679 0.464717 0.000000
 0.785760 0.466624 0.000000
 0.802924 0.471710 0.000000
 0.825175 0.485060 0.000000
 0.841068 0.500318 0.000000
 0.850604 0.521933 0.000000
 0.853783 0.543547 0.000000
 0.844247 0.565798 0.000000
 0.832804 0.575969 0.000000
 0.813732 0.580420 0.000000
 0.710108 0.575969 0.000000
 0.937699 0.522568 0.000000
 0.974571 0.527018 0.000000
 0.969485 0.510490 0.000000
 0.986014 0.521933 0.000000
 1.005086 0.528926 0.000000
 1.031151 0.530833 0.000000
 1.057851 0.525111 0.000000
 1.045772 0.495868 0.000000
 1.032422 0.502861 0.000000
 1.015893 0.502861 0.000000
 0.993643 0.490146 0.000000
 0.969485 0.467260 0.000000
 0.952320 0.432295 0.000000
 0.925620 0.307692 0.000000
 0.889383 0.305785 0.000000
 0.937063 0.520661 0.000000
 1.171011 0.528926 0.000000
 1.144946 0.528290 0.000000
 1.117610 0.521297 0.000000
 1.089638 0.509218 0.000000
 1.074380 0.492689 0.000000
 1.050858 0.459631 0.000000
 1.039415 0.429116 0.000000
 1.032422 0.393516 0.000000
 1.043865 0.347743 0.000000
 1.058487 0.316592 0.000000
 1.087095 0.302606 0.000000
 1.122695 0.294978 0.000000
 1.152575 0.298156 0.000000
 1.186268 0.312778 0.000000
 1.213605 0.335029 0.000000
 1.233948 0.363636 0.000000
 1.244755 0.395423 0.000000
 1.254291 0.429752 0.000000
 1.248570 0.464081 0.000000
 1.239034 0.491418 0.000000
 1.219962 0.519390 0.000000
 1.198347 0.529561 0.000000
 1.163382 0.528926 0.000000
 1.160203 0.499682 0.000000
 1.190083 0.495868 0.000000
 1.205976 0.476796 0.000000
 1.205976 0.455817 0.000000
 1.211697 0.418309 0.000000
 1.205976 0.389701 0.000000
 1.191990 0.364272 0.000000
 1.178640 0.349015 0.000000
 1.150032 0.331214 0.000000
 1.123967 0.326764 0.000000
 1.100445 0.335664 0.000000
 1.084552 0.347743 0.000000
 1.076287 0.380165 0.000000
 1.076923 0.413223 0.000000
 1.085188 0.444374 0.000000
 1.099809 0.475524 0.000000
 1.118881 0.493961 0.000000
 1.139860 0.502225 0.000000
 1.157025 0.504132 0.000000
 1.330579 0.606484 0.000000
 1.359822 0.607120 0.000000
 1.350286 0.575334 0.000000
 1.326128 0.575969 0.000000
 1.334393 0.605849 0.000000
 1.308964 0.526383 0.000000
 1.348379 0.521297 0.000000
 1.294978 0.273363 0.000000
 1.286713 0.245391 0.000000
 1.268913 0.235219 0.000000
 1.247298 0.226319 0.000000
 1.225683 0.224412 0.000000
 1.202797 0.226955 0.000000
 1.205976 0.253655 0.000000
 1.234584 0.258741 0.000000
 1.249841 0.268913 0.000000
 1.258741 0.291163 0.000000
 1.268913 0.328671 0.000000
 1.312142 0.527654 0.000000
 1.575334 0.410045 0.000000
 1.574062 0.441831 0.000000
 1.570884 0.474253 0.000000
 1.556262 0.502225 0.000000
 1.533376 0.520025 0.000000
 1.510490 0.528926 0.000000
 1.469803 0.530833 0.000000
 1.435474 0.518118 0.000000
 1.401780 0.494596 0.000000
 1.378894 0.462810 0.000000
 1.366815 0.432295 0.000000
 1.361729 0.395423 0.000000
 1.365544 0.367451 0.000000
 1.374444 0.334393 0.000000
 1.392244 0.314685 0.000000
 1.423395 0.300064 0.000000
 1.452638 0.299428 0.000000
 1.481246 0.301971 0.000000
 1.514304 0.316592 0.000000
 1.528926 0.330579 0.000000
 1.546090 0.348379 0.000000
 1.556262 0.368722 0.000000
 1.530197 0.382072 0.000000
 1.511761 0.356643 0.000000
 1.485696 0.340114 0.000000
 1.460267 0.330579 0.000000
 1.425302 0.336300 0.000000
 1.404959 0.355372 0.000000
 1.401780 0.387158 0.000000
 1.406230 0.410680 0.000000
 1.577241 0.403687 0.000000
 1.532104 0.435474 0.000000
 1.532104 0.453274 0.000000
 1.523840 0.479975 0.000000
 1.510490 0.495868 0.000000
 1.482517 0.504768 0.000000
 1.466624 0.502225 0.000000
 1.449460 0.495868 0.000000
 1.432931 0.481882 0.000000
 1.424031 0.467896 0.000000
 1.420216 0.450095 0.000000
 1.420852 0.441831 0.000000
 1.530197 0.434202 0.000000
 1.801653 0.459631 0.000000
 1.794024 0.481882 0.000000
 1.778131 0.500318 0.000000
 1.766052 0.513032 0.000000
 1.741894 0.527018 0.000000
 1.722823 0.530197 0.000000
 1.701208 0.530197 0.000000
 1.672600 0.523204 0.000000
 1.655435 0.514304 0.000000
 1.636364 0.499682 0.000000
 1.621742 0.481882 0.000000
 1.609663 0.456453 0.000000
 1.600763 0.425302 0.000000
 1.597584 0.383980 0.000000
 1.606484 0.340750 0.000000
 1.626828 0.320407 0.000000
 1.649714 0.304514 0.000000
 1.671329 0.299428 0.000000
 1.696758 0.296885 0.000000
 1.725366 0.305149 0.000000
 1.745073 0.321043 0.000000
 1.763509 0.340750 0.000000
 1.773045 0.354100 0.000000
 1.782581 0.378894 0.000000
 1.749523 0.391608 0.000000
 1.739987 0.374444 0.000000
 1.720915 0.348379 0.000000
 1.698665 0.335664 0.000000
 1.665607 0.332486 0.000000
 1.644628 0.347107 0.000000
 1.635092 0.375715 0.000000
 1.636999 0.413859 0.000000
 1.643357 0.439288 0.000000
 1.658614 0.471074 0.000000
 1.672600 0.488875 0.000000
 1.698029 0.504768 0.000000
 1.721551 0.505404 0.000000
 1.743802 0.499046 0.000000
 1.756516 0.485060 0.000000
 1.760966 0.469803 0.000000
 1.760966 0.450731 0.000000
 1.797839 0.458360 0.000000
 1.905277 0.602670 0.000000
 1.865226 0.579784 0.000000
 1.855690 0.528926 0.000000
 1.830261 0.528290 0.000000
 1.820725 0.500318 0.000000
 1.841068 0.495868 0.000000
 1.820089 0.380165 0.000000
 1.815003 0.347743 0.000000
 1.821360 0.315321 0.000000
 1.839161 0.300064 0.000000
 1.863954 0.297521 0.000000
 1.891291 0.303878 0.000000
 1.894469 0.307692 0.000000
 1.890019 0.338207 0.000000
 1.870947 0.326764 0.000000
 1.854418 0.335029 0.000000
 1.855054 0.347107 0.000000
 1.863954 0.377622 0.000000
 1.889383 0.501589 0.000000
 1.926891 0.496503 0.000000
 1.931977 0.528926 0.000000
 1.895741 0.528290 0.000000
 1.912270 0.607120 0.000000
 2.203562 1.024809 0.000000
 2.202926 1.050891 0.000000
 2.199109 1.068702 0.000000
 2.190840 1.083333 0.000000
 2.180662 1.099873 0.000000
 2.164122 1.110051 0.000000
 2.148219 1.117048 0.000000
 2.131679 1.120865 0.000000
 2.115776 1.125318 0.000000
 2.096056 1.124046 0.000000
 2.073791 1.123410 0.000000
 2.059160 1.119593 0.000000
 2.038168 1.112595 0.000000
 2.020356 1.100509 0.000000
 2.005089 1.085242 0.000000
 1.994911 1.069338 0.000000
 1.993003 1.048346 0.000000
 1.990458 1.020992 0.000000
 1.999364 1.006361 0.000000
 2.017812 0.984733 0.000000
 2.032443 0.970102 0.000000
 2.048346 0.961196 0.000000
 2.079517 0.944020 0.000000
 2.114504 0.928117 0.000000
 2.139949 0.912850 0.000000
 2.146310 0.898855 0.000000
 2.145038 0.879135 0.000000
 2.141221 0.860687 0.000000
 2.134224 0.852417 0.000000
 2.118957 0.837786 0.000000
 2.104962 0.833333 0.000000
 2.086514 0.833333 0.000000
 2.063613 0.833333 0.000000
 2.042621 0.837150 0.000000
 2.017176 0.846056 0.000000
 2.005089 0.857506 0.000000
 1.997455 0.870229 0.000000
 1.992366 0.902036 0.000000
 1.958015 0.900763 0.000000
 1.956743 0.861323 0.000000
 1.965649 0.841603 0.000000
 1.985369 0.822519 0.000000
 2.012723 0.811705 0.000000
 2.037532 0.802163 0.000000
 2.068702 0.802163 0.000000
 2.096056 0.804071 0.000000
 2.122774 0.807252 0.000000
 2.146310 0.821883 0.000000
 2.164122 0.833333 0.000000
 2.177481 0.853053 0.000000
 2.186387 0.877226 0.000000
 2.188295 0.900127 0.000000
 2.184478 0.919211 0.000000
 2.177481 0.937659 0.000000
 2.163486 0.951654 0.000000
 2.141858 0.962468 0.000000
 2.107506 0.982188 0.000000
 2.071883 0.996819 0.000000
 2.036260 1.024809 0.000000
 2.029898 1.041985 0.000000
 2.030534 1.058524 0.000000
 2.035623 1.071883 0.000000
 2.050254 1.083969 0.000000
 2.065522 1.088422 0.000000
 2.085878 1.091603 0.000000
 2.103690 1.091603 0.000000
 2.123410 1.082061 0.000000
 2.147583 1.077608 0.000000
 2.155852 1.062977 0.000000
 2.163486 1.043893 0.000000
 2.169847 1.023537 0.000000
 2.198473 1.029898 0.000000
 2.432570 0.907125 0.000000
 2.435115 0.931298 0.000000
 2.431298 0.966285 0.000000
 2.425573 0.989822 0.000000
 2.416667 1.010814 0.000000
 2.383588 1.027990 0.000000
 2.352417 1.038168 0.000000
 2.321883 1.034351 0.000000
 2.297710 1.025445 0.000000
 2.267812 1.009542 0.000000
 2.246183 0.982824 0.000000
 2.236641 0.955471 0.000000
 2.223919 0.925573 0.000000
 2.223919 0.877863 0.000000
 2.235369 0.837150 0.000000
 2.266539 0.809796 0.000000
 2.294529 0.800891 0.000000
 2.320611 0.800891 0.000000
 2.349873 0.803435 0.000000
 2.370865 0.814249 0.000000
 2.389949 0.830153 0.000000
 2.403944 0.842875 0.000000
 2.424300 0.868957 0.000000
 2.390585 0.879771 0.000000
 2.367048 0.849873 0.000000
 2.347328 0.834606 0.000000
 2.318702 0.830789 0.000000
 2.293893 0.832697 0.000000
 2.274173 0.847964 0.000000
 2.259542 0.867684 0.000000
 2.257634 0.886768 0.000000
 2.257634 0.907761 0.000000
 2.433842 0.903308 0.000000
 2.276718 0.937659 0.000000
 2.283715 0.955471 0.000000
 2.303435 0.987913 0.000000
 2.317430 1.005725 0.000000
 2.347964 1.012723 0.000000
 2.372137 1.001272 0.000000
 2.382952 0.985369 0.000000
 2.390585 0.965649 0.000000
 2.394402 0.940204 0.000000
 2.274809 0.935115 0.000000
 2.497455 1.025445 0.000000
 2.458015 0.811705 0.000000
 2.496183 0.813613 0.000000
 2.519084 0.936387 0.000000
 2.535623 0.970102 0.000000
 2.558524 0.996819 0.000000
 2.583969 1.013995 0.000000
 2.611959 1.006997 0.000000
 2.625954 0.988550 0.000000
 2.620865 0.958651 0.000000
 2.587786 0.806616 0.000000
 2.630407 0.807888 0.000000
 2.666031 0.961832 0.000000
 2.663486 1.001908 0.000000
 2.651399 1.020356 0.000000
 2.629135 1.034351 0.000000
 2.601145 1.033079 0.000000
 2.571247 1.028626 0.000000
 2.551527 1.017176 0.000000
 2.536896 1.012087 0.000000
 2.541349 1.031807 0.000000
 2.497455 1.031807 0.000000
 2.750000 1.113868 0.000000
 2.743003 1.086514 0.000000
 2.777990 1.085242 0.000000
 2.784351 1.111959 0.000000
 2.751272 1.110687 0.000000
 2.733461 1.029262 0.000000
 2.766539 1.027990 0.000000
 2.730916 0.809796 0.000000
 2.690840 0.811069 0.000000
 2.734097 1.033715 0.000000
 2.905216 1.038804 0.000000
 2.942748 1.032443 0.000000
 2.977735 1.017176 0.000000
 2.994275 0.980916 0.000000
 2.998092 0.930025 0.000000
 2.991094 0.880407 0.000000
 2.970102 0.840331 0.000000
 2.932570 0.814885 0.000000
 2.892494 0.794529 0.000000
 2.849873 0.802163 0.000000
 2.812341 0.819975 0.000000
 2.787532 0.849873 0.000000
 2.781807 0.879135 0.000000
 2.784351 0.923028 0.000000
 2.800254 0.966921 0.000000
 2.821883 0.997455 0.000000
 2.846692 1.022265 0.000000
 2.875318 1.032443 0.000000
 2.908397 1.037532 0.000000
 2.905852 1.010178 0.000000
 2.937659 1.000000 0.000000
 2.957379 0.975191 0.000000
 2.961196 0.944020 0.000000
 2.952926 0.905216 0.000000
 2.944656 0.874046 0.000000
 2.926845 0.847328 0.000000
 2.905852 0.833333 0.000000
 2.882952 0.827608 0.000000
 2.840331 0.837150 0.000000
 2.823155 0.860687 0.000000
 2.822519 0.895674 0.000000
 2.831425 0.939567 0.000000
 2.842239 0.973282 0.000000
 2.858142 0.994911 0.000000
 2.875954 1.003817 0.000000
 2.909033 1.008270 0.000000
 3.063613 1.032443 0.000000
 3.096692 1.029898 0.000000
 3.096692 1.014631 0.000000
 3.115140 1.025445 0.000000
 3.145038 1.036896 0.000000
 3.190840 1.029262 0.000000
 3.171756 1.001272 0.000000
 3.151399 1.005089 0.000000
 3.127226 1.001272 0.000000
 3.101781 0.980280 0.000000
 3.087786 0.947837 0.000000
 3.075064 0.917939 0.000000
 3.068066 0.885496 0.000000
 3.055344 0.846692 0.000000
 3.048982 0.808524 0.000000
 3.012723 0.810433 0.000000
 3.062341 1.031170 0.000000
 1.693654 2.525847 0.000000
 1.707651 2.557659 0.000000
 1.726101 2.568475 0.000000
 1.743916 2.569111 0.000000
 1.769365 2.553205 0.000000
 1.783362 2.524575 0.000000
 1.691745 2.526483 0.000000
 0.939418 2.607728 0.000000
 0.915885 2.654158 0.000000
 0.896168 2.676419 0.000000
 0.867547 2.694228 0.000000
 0.837017 2.697408 0.000000
 0.784862 2.698044 0.000000
 0.750517 2.683415 0.000000
 0.715535 2.664335 0.000000
 0.690094 2.633805 0.000000
 0.672921 2.589283 0.000000
 0.667833 2.567022 0.000000
 0.667197 2.498330 0.000000
 0.686278 2.446176 0.000000
 0.718715 2.417554 0.000000
 0.760693 2.392113 0.000000
 0.803943 2.389569 0.000000
 0.852918 2.395293 0.000000
 0.896168 2.414374 0.000000
 0.923517 2.442996 0.000000
 0.942598 2.487518 0.000000
 0.888536 2.504055 0.000000
 0.861822 2.470345 0.000000
 0.823024 2.445540 0.000000
 0.782318 2.444904 0.000000
 0.751153 2.465893 0.000000
 0.733344 2.496422 0.000000
 0.728892 2.534584 0.000000
 0.728256 2.565750 0.000000
 0.742884 2.606456 0.000000
 0.770870 2.635077 0.000000
 0.793767 2.644618 0.000000
 0.830021 2.638893 0.000000
 0.864366 2.621720 0.000000
 0.882175 2.595643 0.000000
 0.933058 2.610908 0.000000
 0.990301 2.604548 0.000000
 1.041183 2.607092 0.000000
 1.048179 2.455716 0.000000
 1.059628 2.437271 0.000000
 1.079981 2.430275 0.000000
 1.101606 2.430911 0.000000
 1.126411 2.465257 0.000000
 1.130227 2.605820 0.000000
 1.183654 2.604548 0.000000
 1.184290 2.388933 0.000000
 1.130227 2.390205 0.000000
 1.132135 2.417554 0.000000
 1.106058 2.392113 0.000000
 1.074257 2.383209 0.000000
 1.035459 2.385117 0.000000
 1.011926 2.395293 0.000000
 0.988392 2.425187 0.000000
 0.991573 2.607092 0.000000
 1.252981 2.609636 0.000000
 1.306408 2.608364 0.000000
 1.310860 2.592463 0.000000
 1.343298 2.611544 0.000000
 1.382096 2.611544 0.000000
 1.444427 2.605820 0.000000
 1.494673 2.465893 0.000000
 1.551280 2.605184 0.000000
 1.607887 2.603912 0.000000
 1.523931 2.391477 0.000000
 1.468596 2.387025 0.000000
 1.389728 2.586103 0.000000
 1.375099 2.540945 0.000000
 1.356654 2.552393 0.000000
 1.333757 2.554937 0.000000
 1.310224 2.519955 0.000000
 1.309588 2.390205 0.000000
 1.250437 2.387661 0.000000
 1.249801 2.602640 0.000000
 1.833042 2.482430 0.000000
 1.829862 2.539672 0.000000
 1.803784 2.581651 0.000000
 1.765623 2.606456 0.000000
 1.722372 2.613452 0.000000
 1.662585 2.592463 0.000000
 1.629512 2.541581 0.000000
 1.623788 2.470345 0.000000
 1.652409 2.409922 0.000000
 1.713468 2.380665 0.000000
 1.766259 2.383845 0.000000
 1.805692 2.416282 0.000000
 1.827954 2.451264 0.000000
 1.768803 2.455716 0.000000
 1.754174 2.431547 0.000000
 1.730641 2.419463 0.000000
 1.708380 2.432819 0.000000
 1.686755 2.449356 0.000000
 1.682938 2.479886 0.000000
 1.831770 2.483702 0.000000
 2.014947 2.686596 0.000000
 2.067737 2.687868 0.000000
 2.070281 2.387661 0.000000
 2.007950 2.385753 0.000000
 2.008586 2.412466 0.000000
 1.985689 2.389569 0.000000
 1.956432 2.379393 0.000000
 1.912546 2.385117 0.000000
 1.876292 2.409286 0.000000
 1.857211 2.458260 0.000000
 1.857847 2.524408 0.000000
 1.881380 2.574018 0.000000
 1.910002 2.611544 0.000000
 1.940531 2.616632 0.000000
 1.973605 2.606456 0.000000
 2.013675 2.589283 0.000000
 2.020671 2.687232 0.000000
 1.958976 2.570838 0.000000
 1.992050 2.557481 0.000000
 2.011767 2.527588 0.000000
 2.009858 2.465257 0.000000
 1.996502 2.441724 0.000000
 1.969152 2.423915 0.000000
 1.935443 2.433455 0.000000
 1.920814 2.456988 0.000000
 1.916998 2.518683 0.000000
 1.937351 2.557481 0.000000
 1.955160 2.565750 0.000000
 1.653087 2.005729 0.000000
 1.668364 2.033100 0.000000
 1.689370 2.054742 0.000000
 1.716741 2.058561 0.000000
 1.736474 2.031827 0.000000
 1.745385 1.997454 0.000000
 1.746658 1.947167 0.000000
 1.733927 1.915977 0.000000
 1.719287 1.909612 0.000000
 1.681095 1.905792 0.000000
 1.665181 1.923616 0.000000
 1.651814 1.949714 0.000000
 1.653724 2.003183 0.000000
 0.687987 2.184248 0.000000
 0.849642 2.184248 0.000000
 0.889101 2.170247 0.000000
 0.913922 2.127605 0.000000
 0.916468 2.103421 0.000000
 0.916468 2.061416 0.000000
 0.899920 2.027049 0.000000
 0.872554 2.006046 0.000000
 0.836277 1.991408 0.000000
 0.744630 1.992045 0.000000
 0.739539 1.874940 0.000000
 0.682259 1.871758 0.000000
 0.687351 2.179793 0.000000
 0.743994 2.125060 0.000000
 0.814638 2.122514 0.000000
 0.844551 2.110422 0.000000
 0.852824 2.088783 0.000000
 0.841368 2.062689 0.000000
 0.821002 2.049324 0.000000
 0.744630 2.043596 0.000000
 0.746539 2.125696 0.000000
 1.047574 2.104057 0.000000
 1.094670 2.095147 0.000000
 1.126492 2.076054 0.000000
 1.148767 2.031504 0.000000
 1.150676 1.968496 0.000000
 1.004932 1.968496 0.000000
 1.025935 1.927765 0.000000
 1.054574 1.918854 0.000000
 1.076213 1.926492 0.000000
 1.092761 1.947494 0.000000
 1.144312 1.930310 0.000000
 1.115672 1.890851 0.000000
 1.090215 1.869849 0.000000
 1.043119 1.867940 0.000000
 0.990931 1.878759 0.000000
 0.956563 1.912490 0.000000
 0.944471 1.940493 0.000000
 0.944471 2.013683 0.000000
 0.961018 2.057597 0.000000
 0.983930 2.086874 0.000000
 1.017025 2.102784 0.000000
 1.047574 2.105330 0.000000
 1.008115 2.014320 0.000000
 1.021480 2.048051 0.000000
 1.045028 2.063325 0.000000
 1.080668 2.045505 0.000000
 1.094670 2.014956 0.000000
 1.006842 2.014956 0.000000
 1.193954 2.100875 0.000000
 1.254415 2.096420 0.000000
 1.257597 2.084964 0.000000
 1.286237 2.109785 0.000000
 1.321877 2.104694 0.000000
 1.335879 2.090056 0.000000
 1.316786 2.037232 0.000000
 1.294511 2.042959 0.000000
 1.272872 2.042959 0.000000
 1.260143 2.020048 0.000000
 1.251870 1.875577 0.000000
 1.192681 1.873031 0.000000
 1.195227 2.094511 0.000000
 1.540175 2.044232 0.000000
 1.514081 2.080509 0.000000
 1.468894 2.103421 0.000000
 1.404614 2.105967 0.000000
 1.361337 2.084964 0.000000
 1.342243 2.056325 0.000000
 1.333970 2.018775 0.000000
 1.353063 1.986953 0.000000
 1.391885 1.965951 0.000000
 1.432617 1.957677 0.000000
 1.478441 1.946221 0.000000
 1.486714 1.934129 0.000000
 1.473349 1.918218 0.000000
 1.444073 1.910581 0.000000
 1.410342 1.916945 0.000000
 1.386794 1.943675 0.000000
 1.335879 1.934765 0.000000
 1.353063 1.902944 0.000000
 1.386794 1.873667 0.000000
 1.440891 1.866667 0.000000
 1.487351 1.871758 0.000000
 1.527446 1.894033 0.000000
 1.540811 1.915036 0.000000
 1.547812 1.951949 0.000000
 1.534447 1.985044 0.000000
 1.487351 2.004773 0.000000
 1.442164 2.016229 0.000000
 1.405887 2.025776 0.000000
 1.394431 2.046142 0.000000
 1.412251 2.058234 0.000000
 1.438345 2.065235 0.000000
 1.465076 2.055052 0.000000
 1.486078 2.034049 0.000000
 1.542084 2.047414 0.000000
 1.594909 2.096420 0.000000
 1.650915 2.094511 0.000000
 1.651551 2.072235 0.000000
 1.678282 2.094511 0.000000
 1.721559 2.100875 0.000000
 1.761655 2.089419 0.000000
 1.795386 2.044232 0.000000
 1.806205 1.997772 0.000000
 1.803660 1.950676 0.000000
 1.783294 1.899125 0.000000
 1.759109 1.874940 0.000000
 1.712013 1.862212 0.000000
 1.681464 1.872395 0.000000
 1.649006 1.894670 0.000000
 1.646460 1.782021 0.000000
 1.593636 1.789658 0.000000
 1.598091 2.095784 0.000000
 2.039777 1.971042 0.000000
 2.037232 2.039141 0.000000
 2.009865 2.079236 0.000000
 1.976134 2.098966 0.000000
 1.938584 2.103421 0.000000
 1.888305 2.095147 0.000000
 1.853302 2.058234 0.000000
 1.836754 1.997772 0.000000
 1.833572 1.939220 0.000000
 1.868576 1.892124 0.000000
 1.937311 1.864757 0.000000
 1.987589 1.878759 0.000000
 2.041050 1.934765 0.000000
 1.982498 1.944312 0.000000
 1.965314 1.921400 0.000000
 1.947494 1.909944 0.000000
 1.922037 1.915672 0.000000
 1.900398 1.932856 0.000000
 1.893397 1.961496 0.000000
 2.038504 1.966587 0.000000
 1.895306 2.009228 0.000000
 1.916309 2.049960 0.000000
 1.941766 2.058234 0.000000
 1.974861 2.040414 0.000000
 1.985044 2.007955 0.000000
 1.905489 2.007955 0.000000
 2.268258 2.034686 0.000000
 2.251710 2.068417 0.000000
 2.219889 2.096420 0.000000
 2.177247 2.102148 0.000000
 2.121241 2.091329 0.000000
 2.084328 2.061416 0.000000
 2.070963 2.009228 0.000000
 2.072235 1.946858 0.000000
 2.099602 1.897216 0.000000
 2.142243 1.866030 0.000000
 2.201432 1.867303 0.000000
 2.245346 1.888942 0.000000
 2.288624 1.948767 0.000000
 2.212888 1.956404 0.000000
 2.195704 1.923309 0.000000
 2.161973 1.913763 0.000000
 2.137788 1.930310 0.000000
 2.125696 1.976134 0.000000
 2.126969 2.033413 0.000000
 2.156881 2.062689 0.000000
 2.200159 2.053779 0.000000
 2.216070 2.030867 0.000000
 2.270804 2.039141 0.000000
 2.375815 2.168974 0.000000
 2.316627 2.132060 0.000000
 2.321718 2.095147 0.000000
 2.293079 2.097056 0.000000
 2.291169 2.049324 0.000000
 2.315354 2.049960 0.000000
 2.320446 1.919491 0.000000
 2.328083 1.889578 0.000000
 2.353540 1.869849 0.000000
 2.422912 1.869849 0.000000
 2.426730 1.914399 0.000000
 2.403819 1.910581 0.000000
 2.377088 1.939857 0.000000
 2.378361 2.053779 0.000000
 2.419093 2.051233 0.000000
 2.423548 2.093238 0.000000
 2.382816 2.093238 0.000000
 2.377088 2.168974 0.000000
 2.471281 2.178520 0.000000
 2.522196 2.175975 0.000000
 2.520923 2.129515 0.000000
 2.468099 2.127605 0.000000
 2.468099 2.179793 0.000000
 2.465553 2.092601 0.000000
 2.519014 2.093874 0.000000
 2.521559 1.871122 0.000000
 2.471917 1.874304 0.000000
 2.466189 2.090056 0.000000
 2.554654 2.093238 0.000000
 2.603023 2.095784 0.000000
 2.662848 1.957677 0.000000
 2.715036 2.095147 0.000000
 2.767860 2.087510 0.000000
 2.690851 1.874304 0.000000
 2.639300 1.871122 0.000000
 2.556563 2.087510 0.000000
 2.995704 1.971042 0.000000
 2.984885 2.048051 0.000000
 2.947335 2.092601 0.000000
 2.906603 2.105967 0.000000
 2.870326 2.101512 0.000000
 2.821321 2.080509 0.000000
 2.792681 2.022593 0.000000
 2.788226 1.948130 0.000000
 2.814320 1.890851 0.000000
 2.872872 1.867303 0.000000
 2.923150 1.867303 0.000000
 2.965792 1.887033 0.000000
 2.997613 1.932220 0.000000
 2.932697 1.945585 0.000000
 2.918059 1.919491 0.000000
 2.893874 1.909944 0.000000
 2.869053 1.920764 0.000000
 2.849324 1.944312 0.000000
 2.846778 1.963405 0.000000
 3.000159 1.969769 0.000000
 2.853142 2.010501 0.000000
 2.858234 2.036595 0.000000
 2.886237 2.058234 0.000000
 2.925696 2.044869 0.000000
 2.946062 2.012411 0.000000
 2.854415 2.006046 0.000000
 0.682896 1.658552 0.000000
 0.841368 1.657916 0.000000
 0.873190 1.645823 0.000000
 0.899920 1.623548 0.000000
 0.912649 1.594272 0.000000
 0.914558 1.560541 0.000000
 0.905012 1.520446 0.000000
 0.887828 1.488624 0.000000
 0.866826 1.479077 0.000000
 0.841368 1.466348 0.000000
 0.815274 1.463803 0.000000
 0.743994 1.463803 0.000000
 0.743357 1.357518 0.000000
 0.683532 1.347335 0.000000
 0.684805 1.655370 0.000000
 0.743357 1.597454 0.000000
 0.818457 1.595545 0.000000
 0.842005 1.585362 0.000000
 0.852824 1.564996 0.000000
 0.843278 1.533811 0.000000
 0.821639 1.521082 0.000000
 0.745267 1.518536 0.000000
 0.740175 1.595545 0.000000
 0.955927 1.572633 0.000000
 1.018298 1.569451 0.000000
 1.017661 1.554813 0.000000
 1.039300 1.571360 0.000000
 1.061575 1.581543 0.000000
 1.088305 1.579634 0.000000
 1.101034 1.566905 0.000000
 1.086396 1.513445 0.000000
 1.072395 1.517900 0.000000
 1.046937 1.519809 0.000000
 1.029117 1.500080 0.000000
 1.023389 1.468258 0.000000
 1.018934 1.351154 0.000000
 0.957200 1.349244 0.000000
 0.962291 1.572633 0.000000
 1.227685 1.572633 0.000000
 1.270963 1.570724 0.000000
 1.303421 1.550358 0.000000
 1.327605 1.521718 0.000000
 1.339698 1.489260 0.000000
 1.335243 1.438982 0.000000
 1.327605 1.402068 0.000000
 1.300875 1.367064 0.000000
 1.274781 1.350517 0.000000
 1.238504 1.342243 0.000000
 1.195863 1.342243 0.000000
 1.158313 1.356245 0.000000
 1.127765 1.385521 0.000000
 1.115036 1.417343 0.000000
 1.108035 1.454893 0.000000
 1.113763 1.492442 0.000000
 1.130310 1.526173 0.000000
 1.151949 1.557995 0.000000
 1.184407 1.571360 0.000000
 1.218775 1.577088 0.000000
 1.225139 1.533174 0.000000
 1.262689 1.517263 0.000000
 1.275418 1.496261 0.000000
 1.277963 1.474622 0.000000
 1.278600 1.438982 0.000000
 1.270326 1.414161 0.000000
 1.255688 1.395068 0.000000
 1.225139 1.388703 0.000000
 1.197136 1.392522 0.000000
 1.182498 1.414161 0.000000
 1.171042 1.443437 0.000000
 1.173588 1.483532 0.000000
 1.183134 1.513445 0.000000
 1.197136 1.529992 0.000000
 1.208592 1.534447 0.000000
 1.226412 1.537629 0.000000
 1.382975 1.652824 0.000000
 1.434527 1.650278 0.000000
 1.435800 1.604455 0.000000
 1.388067 1.602546 0.000000
 1.384248 1.656643 0.000000
 1.384885 1.572633 0.000000
 1.438345 1.565632 0.000000
 1.437709 1.318059 0.000000
 1.431981 1.293238 0.000000
 1.415434 1.270963 0.000000
 1.387430 1.262053 0.000000
 1.360700 1.259507 0.000000
 1.328242 1.256961 0.000000
 1.336516 1.311695 0.000000
 1.364519 1.312967 0.000000
 1.374065 1.318695 0.000000
 1.381702 1.339698 0.000000
 1.382975 1.568815 0.000000
 1.689737 1.442164 0.000000
 1.691647 1.482259 0.000000
 1.682100 1.522355 0.000000
 1.663644 1.552904 0.000000
 1.636913 1.565632 0.000000
 1.615274 1.573270 0.000000
 1.589817 1.577088 0.000000
 1.561814 1.573270 0.000000
 1.527446 1.559268 0.000000
 1.508990 1.534447 0.000000
 1.493715 1.508353 0.000000
 1.488624 1.473349 0.000000
 1.487351 1.434527 0.000000
 1.498170 1.395068 0.000000
 1.517900 1.362609 0.000000
 1.549722 1.342243 0.000000
 1.585362 1.340334 0.000000
 1.622912 1.344153 0.000000
 1.650278 1.358154 0.000000
 1.671917 1.374065 0.000000
 1.691647 1.406523 0.000000
 1.638823 1.417979 0.000000
 1.620366 1.394431 0.000000
 1.592999 1.387430 0.000000
 1.565632 1.396977 0.000000
 1.554177 1.410342 0.000000
 1.545903 1.440255 0.000000
 1.689101 1.444710 0.000000
 1.546539 1.489897 0.000000
 1.554813 1.511535 0.000000
 1.569451 1.528083 0.000000
 1.589181 1.533174 0.000000
 1.613365 1.526173 0.000000
 1.624821 1.512808 0.000000
 1.631185 1.501989 0.000000
 1.635004 1.486078 0.000000
 1.546539 1.482259 0.000000
 1.923309 1.515990 0.000000
 1.910581 1.540175 0.000000
 1.888942 1.559905 0.000000
 1.868576 1.573906 0.000000
 1.844391 1.576452 0.000000
 1.802387 1.573270 0.000000
 1.777566 1.570724 0.000000
 1.752108 1.553540 0.000000
 1.734924 1.531265 0.000000
 1.723469 1.508990 0.000000
 1.720286 1.462530 0.000000
 1.722832 1.424344 0.000000
 1.733015 1.391249 0.000000
 1.757836 1.364519 0.000000
 1.789021 1.344789 0.000000
 1.829753 1.340334 0.000000
 1.866667 1.350517 0.000000
 1.893397 1.363882 0.000000
 1.913763 1.382339 0.000000
 1.936038 1.420525 0.000000
 1.874304 1.430072 0.000000
 1.852665 1.398250 0.000000
 1.838027 1.381702 0.000000
 1.815115 1.384885 0.000000
 1.790931 1.398250 0.000000
 1.777566 1.417979 0.000000
 1.778202 1.442800 0.000000
 1.776293 1.494352 0.000000
 1.785839 1.517263 0.000000
 1.803023 1.528719 0.000000
 1.818934 1.536356 0.000000
 1.845664 1.528719 0.000000
 1.862212 1.522355 0.000000
 1.869212 1.501989 0.000000
 1.921400 1.514718 0.000000
 2.025139 1.640732 0.000000
 1.971042 1.604455 0.000000
 1.967860 1.570724 0.000000
 1.944312 1.568815 0.000000
 1.945585 1.527446 0.000000
 1.967224 1.528083 0.000000
 1.965951 1.405251 0.000000
 1.967224 1.383612 0.000000
 1.977407 1.363246 0.000000
 1.994590 1.351790 0.000000
 2.017502 1.349244 0.000000
 2.062689 1.349244 0.000000
 2.076691 1.353063 0.000000
 2.074781 1.395068 0.000000
 2.049324 1.386158 0.000000
 2.034686 1.389340 0.000000
 2.026412 1.411615 0.000000
 2.027049 1.437709 0.000000
 2.025776 1.473986 0.000000
 2.027049 1.526173 0.000000
 2.069053 1.519809 0.000000
 2.070963 1.568815 0.000000
 2.030231 1.566905 0.000000
 2.030231 1.643278 0.000000
 2.112967 1.650915 0.000000
 2.168337 1.652824 0.000000
 2.168337 1.603182 0.000000
 2.116786 1.596181 0.000000
 2.111695 1.654097 0.000000
 2.114877 1.567542 0.000000
 2.164519 1.570088 0.000000
 2.168974 1.358154 0.000000
 2.116150 1.349244 0.000000
 2.112331 1.563723 0.000000
 2.319173 1.572633 0.000000
 2.366905 1.569451 0.000000
 2.399364 1.554177 0.000000
 2.432458 1.521718 0.000000
 2.443278 1.487351 0.000000
 2.443278 1.438345 0.000000
 2.430549 1.394431 0.000000
 2.401909 1.366428 0.000000
 2.368815 1.346698 0.000000
 2.319809 1.342880 0.000000
 2.276531 1.351154 0.000000
 2.241527 1.372156 0.000000
 2.219889 1.405887 0.000000
 2.212888 1.435800 0.000000
 2.212888 1.486078 0.000000
 2.225617 1.528083 0.000000
 2.250438 1.554813 0.000000
 2.277804 1.567542 0.000000
 2.304535 1.571997 0.000000
 2.326173 1.575179 0.000000
 2.326173 1.532538 0.000000
 2.353540 1.525537 0.000000
 2.374543 1.502625 0.000000
 2.385362 1.477804 0.000000
 2.382816 1.444073 0.000000
 2.371997 1.418616 0.000000
 2.356722 1.392522 0.000000
 2.326810 1.388067 0.000000
 2.301352 1.388703 0.000000
 2.280350 1.408433 0.000000
 2.272076 1.433890 0.000000
 2.270804 1.461893 0.000000
 2.270804 1.495625 0.000000
 2.287351 1.515354 0.000000
 2.305807 1.528719 0.000000
 2.322355 1.538902 0.000000
 2.492283 1.569451 0.000000
 2.548926 1.571360 0.000000
 2.547653 1.549722 0.000000
 2.574383 1.564360 0.000000
 2.596022 1.576452 0.000000
 2.625935 1.573270 0.000000
 2.653938 1.561814 0.000000
 2.676850 1.540811 0.000000
 2.687669 1.515990 0.000000
 2.687033 1.350517 0.000000
 2.628481 1.349881 0.000000
 2.623389 1.506444 0.000000
 2.611933 1.525537 0.000000
 2.599204 1.532538 0.000000
 2.580748 1.529356 0.000000
 2.559109 1.517900 0.000000
 2.550199 1.498807 0.000000
 2.546380 1.473986 0.000000
 2.545744 1.347971 0.000000
 2.491647 1.350517 0.000000
 2.491010 1.570088 0.000000
 0.685459 1.115464 0.000000
 0.642140 0.916069 0.000000
 0.638955 0.886765 0.000000
 0.649785 0.854913 0.000000
 0.659978 0.833254 0.000000
 0.678452 0.815416 0.000000
 0.710941 0.800764 0.000000
 0.745979 0.794394 0.000000
 0.790572 0.804587 0.000000
 0.818602 0.823061 0.000000
 0.844083 0.844083 0.000000
 0.860010 0.869565 0.000000
 0.872113 0.898869 0.000000
 0.917344 1.113553 0.000000
 0.882943 1.114827 0.000000
 0.829431 0.896958 0.000000
 0.817328 0.872113 0.000000
 0.792483 0.844083 0.000000
 0.763179 0.833254 0.000000
 0.734512 0.830706 0.000000
 0.704571 0.842172 0.000000
 0.689282 0.858735 0.000000
 0.682911 0.878484 0.000000
 0.679726 0.902054 0.000000
 0.729416 1.115464 0.000000
 0.690556 1.117375 0.000000
 0.982322 1.107820 0.000000
 0.923077 0.811594 0.000000
 0.960663 0.809046 0.000000
 1.015448 1.054945 0.000000
 1.100812 0.808409 0.000000
 1.163243 0.809683 0.000000
 1.221214 1.110368 0.000000
 1.186176 1.117375 0.000000
 1.129479 0.849817 0.000000
 1.033286 1.112916 0.000000
 0.984233 1.113553 0.000000
 1.528906 1.025004 0.000000
 1.521261 1.054945 0.000000
 1.511069 1.081064 0.000000
 1.495780 1.096353 0.000000
 1.472209 1.105272 0.000000
 1.449912 1.115464 0.000000
 1.421882 1.121835 0.000000
 1.392578 1.120561 0.000000
 1.354993 1.113553 0.000000
 1.326326 1.096353 0.000000
 1.304666 1.080427 0.000000
 1.286192 1.054945 0.000000
 1.265807 1.012263 0.000000
 1.257525 0.989330 0.000000
 1.253066 0.946648 0.000000
 1.252429 0.909062 0.000000
 1.260073 0.866380 0.000000
 1.277273 0.833891 0.000000
 1.295748 0.817328 0.000000
 1.326963 0.800764 0.000000
 1.353719 0.796305 0.000000
 1.396401 0.797579 0.000000
 1.428890 0.810320 0.000000
 1.453098 0.824335 0.000000
 1.474120 0.845995 0.000000
 1.491957 0.865106 0.000000
 1.513617 0.902692 0.000000
 1.479216 0.913521 0.000000
 1.466476 0.881032 0.000000
 1.448638 0.858735 0.000000
 1.426342 0.844083 0.000000
 1.400860 0.836439 0.000000
 1.363274 0.830706 0.000000
 1.342252 0.837076 0.000000
 1.311674 0.853639 0.000000
 1.300844 0.872750 0.000000
 1.292563 0.901417 0.000000
 1.288740 0.933907 0.000000
 1.291925 0.968944 0.000000
 1.298933 0.997611 0.000000
 1.310400 1.017996 0.000000
 1.324415 1.039656 0.000000
 1.335244 1.054945 0.000000
 1.354993 1.071508 0.000000
 1.376015 1.084886 0.000000
 1.404682 1.086160 0.000000
 1.437809 1.086160 0.000000
 1.462653 1.076605 0.000000
 1.479216 1.058130 0.000000
 1.492594 1.017359 0.000000
 1.532091 1.025641 0.000000
 1.523172 0.809046 0.000000
 1.690715 1.112916 0.000000
 1.735308 1.110368 0.000000
 1.783086 0.811594 0.000000
 1.749960 0.811594 0.000000
 1.732123 0.890588 0.000000
 1.607899 0.889314 0.000000
 1.562669 0.807135 0.000000
 1.519987 0.803950 0.000000
 1.523172 0.812231 0.000000
 1.703456 1.078516 0.000000
 1.626374 0.925625 0.000000
 1.727664 0.924351 0.000000
 1.704730 1.071508 0.000000
 0.001767 1.679520 -4.384674
 0.000127 1.667468 -4.027566
 0.000115 1.602408 -4.025060
 0.000397 1.583132 -4.086457
 0.000443 1.515664 -4.096482
 -0.000437 0.612048 -3.904772
 -0.001019 1.149396 -3.778216
 -0.000743 1.486748 -3.838362
 -0.000581 1.585544 -3.873447
 -0.000271 1.609640 -3.941109
 -0.000276 1.660240 -3.939855
 -0.002038 1.674700 -3.556435
 -0.002061 1.624096 -3.551422
 -0.001802 1.609640 -3.607809
 -0.001675 1.515664 -3.635375
 -0.002464 0.619276 -3.463713
 -0.003206 1.436144 -3.302075
 -0.003235 1.580724 -3.295810
 -0.002873 1.609640 -3.374749
 -0.002873 1.665060 -3.374749
 -0.003811 1.662652 -3.170509
 -0.003845 1.609640 -3.162990
 -0.003644 1.592772 -3.206846
 -0.003552 1.498796 -3.226893
 -0.002147 -0.055420 -3.532628
 -0.001151 1.007228 -3.749398
 -0.000058 -0.026508 -3.987470
 0.001439 1.532532 -4.313251
 0.001572 1.587952 -4.342072
 0.001773 1.619276 -4.385926
 0.001773 1.669880 -4.385926
 -0.004421 1.648192 -3.037689
 -0.004749 1.703616 -2.966268
 -0.005066 1.638556 -2.897354
 -0.005158 1.525300 -2.877304
 -0.005049 1.412048 -2.901112
 -0.004789 1.354216 -2.957497
 -0.004467 1.412048 -3.027665
 -0.004358 1.506024 -3.051473
 -0.004358 1.578312 -3.051473
 -0.004438 1.645784 -3.033930
 -0.004087 1.137348 -3.110364
 -0.005135 1.144580 -2.882317
 -0.005118 0.171084 -2.886076
 -0.005204 0.098796 -2.867281
 -0.005388 0.077108 -2.827185
 -0.005388 0.009640 -2.827185
 -0.004099 0.019276 -3.107857
 -0.004099 0.077108 -3.107857
 -0.004294 0.139760 -3.065255
 -0.004369 1.014456 -3.048966
 -0.004283 1.065060 -3.067761
 -0.004058 1.074700 -3.116629
 -0.004070 1.122892 -3.114122
 -0.005687 1.660240 -2.762027
 -0.006752 1.657832 -2.530220
 -0.006741 0.137348 -2.532726
 -0.006937 0.060240 -2.490124
 -0.006942 0.009640 -2.488872
 -0.005659 0.014456 -2.768292
 -0.005682 0.065060 -2.763281
 -0.005935 0.127712 -2.708149
 -0.005918 1.551808 -2.711907
 -0.005687 1.604820 -2.762027
 -0.005716 1.669880 -2.755762
 -0.007461 1.072288 -2.376101
 -0.007835 1.146988 -2.294654
 -0.008301 1.144580 -2.193161
 -0.008646 1.106024 -2.117982
 -0.008808 1.106024 -2.082897
 -0.008865 1.171084 -2.070367
 -0.008986 1.171084 -2.044055
 -0.008998 0.756628 -2.041548
 -0.008854 0.746988 -2.072873
 -0.008445 1.012048 -2.161836
 -0.008192 1.055420 -2.216969
 -0.007904 1.033736 -2.279620
 -0.007794 0.978312 -2.303426
 -0.007979 0.862652 -2.263330
 -0.008905 0.578312 -2.061595
 -0.009078 0.472288 -2.024006
 -0.009130 0.315664 -2.012728
 -0.008986 0.144580 -2.044055
 -0.008675 0.028916 -2.111717
 -0.008284 -0.004820 -2.196922
 -0.007875 0.019276 -2.285885
 -0.007599 0.057832 -2.346028
 -0.007432 0.045784 -2.382366
 -0.007345 -0.002408 -2.401161
 -0.007271 -0.007228 -2.417451
 -0.007271 0.375904 -2.417451
 -0.007397 0.392772 -2.389885
 -0.007639 0.195180 -2.337257
 -0.007990 0.093976 -2.260824
 -0.008364 0.084336 -2.179379
 -0.008531 0.127712 -2.143042
 -0.008600 0.207228 -2.128005
 -0.008577 0.289156 -2.133018
 -0.008370 0.339760 -2.178125
 -0.007512 0.551808 -2.364823
 -0.007322 0.686748 -2.406173
 -0.007242 0.833736 -2.423716
 -0.007322 0.975904 -2.406173
 -0.007466 1.089156 -2.374849
 -0.010039 1.069880 -1.814754
 -0.010460 1.146988 -1.723284
 -0.010966 1.154216 -1.613020
 -0.011438 1.089156 -1.510272
 -0.011715 0.973492 -1.450127
 -0.011951 0.778312 -1.398755
 -0.012025 0.662652 -1.382465
 -0.011997 0.443372 -1.388730
 -0.011847 0.240964 -1.421309
 -0.011623 0.110844 -1.470176
 -0.011323 0.043372 -1.535332
 -0.011012 0.004820 -1.602994
 -0.010678 -0.007228 -1.675669
 -0.010212 0.038556 -1.777162
 -0.009890 0.139760 -1.847331
 -0.009665 0.257832 -1.896199
 -0.009510 0.397592 -1.930029
 -0.009539 0.710844 -1.923764
 -0.009700 0.881928 -1.888681
 -0.009890 1.014456 -1.847331
 -0.010028 1.069880 -1.817258
 -0.010771 1.062652 -1.655622
 -0.010955 1.028916 -1.615524
 -0.011081 0.973492 -1.587958
 -0.011139 0.910844 -1.575428
 -0.011185 0.265060 -1.565404
 -0.011070 0.159036 -1.590464
 -0.010926 0.106024 -1.621791
 -0.010759 0.093976 -1.658126
 -0.010546 0.118072 -1.704490
 -0.010442 0.185544 -1.727043
 -0.010356 0.289156 -1.745837
 -0.010385 0.865060 -1.739572
 -0.010517 0.992772 -1.710755
 -0.010627 1.043372 -1.686947
 -0.010776 1.055420 -1.654368
 -0.012400 1.134940 -1.301021
 -0.013476 1.115664 -1.066707
 -0.013545 1.007228 -1.051671
 -0.013896 1.125300 -0.975237
 -0.014201 1.149396 -0.908827
 -0.014472 1.127712 -0.849936
 -0.014754 1.040964 -0.788539
 -0.014898 0.910844 -0.757214
 -0.014915 0.739760 -0.753456
 -0.014927 0.163856 -0.750950
 -0.015180 0.074700 -0.695817
 -0.015186 0.024096 -0.694563
 -0.013879 0.009640 -0.978996
 -0.013868 0.060240 -0.981502
 -0.014086 0.120480 -0.933889
 -0.014098 0.175904 -0.931383
 -0.014115 0.869880 -0.927624
 -0.014092 0.910844 -0.932635
 -0.013908 0.975904 -0.972731
 -0.013609 0.903616 -1.037889
 -0.013476 0.807228 -1.066707
 -0.013493 0.132532 -1.062948
 -0.013672 0.067468 -1.024104
 -0.013724 0.000000 -1.012827
 -0.012434 0.007228 -1.293501
 -0.012434 0.038556 -1.293501
 -0.012653 0.127712 -1.245888
 -0.012711 1.016868 -1.233358
 -0.012451 1.069880 -1.289743
 -0.012411 1.137348 -1.298514
 0.018683 1.735756 -8.066705
 0.016123 1.713940 -7.509518
 0.015701 1.667880 -7.417493
 0.015342 1.510304 -7.339337
 0.015191 1.309092 -7.306560
 0.015307 1.146668 -7.331772
 0.015550 1.037576 -7.384718
 0.015973 0.945456 -7.476741
 0.015527 0.872728 -7.379674
 0.015197 0.753940 -7.307821
 0.015081 0.540608 -7.282609
 0.015122 0.460608 -7.291433
 0.015463 0.256968 -7.365809
 0.015892 0.150304 -7.459093
 0.016367 0.104244 -7.562462
 0.017027 0.084848 -7.706171
 0.018712 0.099392 -8.073007
 0.018712 0.155152 -8.073007
 0.018272 0.189092 -7.977200
 0.018174 0.244848 -7.955770
 0.018150 1.546668 -7.950728
 0.018232 1.643636 -7.968377
 0.018695 1.672728 -8.069226
 0.018706 1.721212 -8.071747
 0.017282 1.626668 -7.761638
 0.016795 1.616968 -7.655748
 0.016384 1.534544 -7.566243
 0.016210 1.423032 -7.528427
 0.016181 1.255756 -7.522123
 0.016500 1.042424 -7.591457
 0.016865 1.001212 -7.670873
 0.017264 0.996364 -7.757856
 0.017264 1.633940 -7.757856
 0.017264 0.880000 -7.757856
 0.016610 0.870304 -7.615408
 0.016187 0.744244 -7.523383
 0.016123 0.601212 -7.509518
 0.016141 0.419392 -7.513299
 0.016436 0.273940 -7.577590
 0.016720 0.210908 -7.639359
 0.017085 0.201212 -7.718778
 0.017270 0.283636 -7.759117
 0.017270 0.894544 -7.759117
 0.014073 1.752728 -7.063263
 0.013732 1.696968 -6.988889
 0.013639 1.587880 -6.968720
 0.013737 1.469092 -6.990150
 0.013859 1.425456 -7.016621
 0.014062 1.406060 -7.060742
 0.014282 1.430304 -7.108645
 0.014398 1.495756 -7.133859
 0.014473 1.566060 -7.150245
 0.014386 1.658180 -7.131338
 0.014282 1.735756 -7.108645
 0.014062 1.757576 -7.060742
 0.014710 1.190304 -7.201930
 0.013639 1.197576 -6.968720
 0.013656 0.240000 -6.972501
 0.013616 0.193940 -6.963676
 0.013413 0.162424 -6.919555
 0.013448 0.096968 -6.927120
 0.014728 0.096968 -7.205712
 0.014739 0.155152 -7.208233
 0.014525 0.225456 -7.161591
 0.014461 1.054544 -7.147724
 0.014531 1.115152 -7.162852
 0.014716 1.151516 -7.203191
 0.014710 1.192728 -7.201930
 0.012614 1.110304 -6.745592
 0.012255 1.207272 -6.667434
 0.011878 1.207272 -6.585495
 0.011409 1.144244 -6.483386
 0.011102 0.998788 -6.416575
 0.010934 0.824244 -6.380017
 0.010905 0.700608 -6.373714
 0.012272 0.669092 -6.671216
 0.012203 0.513940 -6.656090
 0.011988 0.368484 -6.609446
 0.011571 0.317576 -6.518683
 0.011224 0.363636 -6.443047
 0.011010 0.472728 -6.396405
 0.010888 0.438788 -6.369933
 0.011247 0.242424 -6.448091
 0.011537 0.123636 -6.511121
 0.012023 0.082424 -6.617011
 0.012764 0.172120 -6.778369
 0.013054 0.402424 -6.841399
 0.013158 0.671516 -6.864089
 0.013008 0.899392 -6.831313
 0.012863 1.008484 -6.799799
 0.012637 1.112728 -6.750634
 0.011971 1.112728 -6.605665
 0.011774 1.071516 -6.562804
 0.011652 0.984244 -6.536332
 0.011641 0.778180 -6.533811
 0.012284 0.773332 -6.673739
 0.012255 0.928484 -6.667434
 0.012191 1.040000 -6.653569
 0.011959 1.136968 -6.603144
 0.010436 1.187880 -6.271605
 0.009382 1.185456 -6.042176
 0.009429 1.010908 -6.052262
 0.009040 1.149092 -5.967801
 0.008687 1.207272 -5.890904
 0.008351 1.195152 -5.817788
 0.008166 1.081212 -5.777448
 0.008253 0.928484 -5.796358
 0.008490 0.853332 -5.848044
 0.008774 0.875152 -5.909813
 0.008878 0.950304 -5.932504
 0.008930 0.991516 -5.943848
 0.009185 0.955152 -5.999315
 0.009313 0.848484 -6.027048
 0.009423 0.666668 -6.051001
 0.009434 0.213332 -6.053522
 0.009232 0.157576 -6.009401
 0.009232 0.109092 -6.009401
 0.010454 0.096968 -6.275387
 0.010459 0.157576 -6.276647
 0.010274 0.189092 -6.236310
 0.010222 0.249696 -6.224964
 0.010222 1.037576 -6.224964
 0.010216 1.124848 -6.223703
 0.010465 1.141820 -6.277909
 0.010459 1.209696 -6.276647
 0.007616 1.081212 -5.657693
 0.007199 1.190304 -5.566928
 0.006741 1.226668 -5.467342
 0.006324 1.180608 -5.376577
 0.005884 1.047272 -5.280773
 0.005832 0.901820 -5.269427
 0.006081 0.770908 -5.323633
 0.006481 0.836364 -5.410614
 0.006579 0.991516 -5.432045
 0.006712 1.112728 -5.461038
 0.007037 1.090908 -5.531633
 0.007210 0.831516 -5.569449
 0.007135 0.591516 -5.553063
 0.006932 0.392728 -5.508942
 0.006568 0.281212 -5.429524
 0.006342 0.273940 -5.380359
 0.005896 0.397576 -5.283294
 0.005797 0.363636 -5.261864
 0.006087 0.218180 -5.324894
 0.006550 0.106668 -5.425742
 0.007245 0.104244 -5.577014
 0.007813 0.290908 -5.700553
 0.008056 0.484848 -5.753497
 0.008062 0.736968 -5.754758
 0.007876 0.899392 -5.714419
 0.007622 1.086060 -5.658953
 0.005073 1.107880 -5.104288
 0.004529 1.209696 -4.985791
 0.004008 1.207272 -4.872337
 0.003585 1.081212 -4.780314
 0.003330 0.865456 -4.724847
 0.003272 0.659392 -4.712240
 0.004656 0.669092 -5.013525
 0.004512 0.448484 -4.982009
 0.004118 0.320000 -4.896288
 0.003707 0.307880 -4.806786
 0.003365 0.446060 -4.732410
 0.003214 0.426668 -4.699635
 0.003712 0.167272 -4.808047
 0.004187 0.092120 -4.911416
 0.004813 0.104244 -5.047560
 0.005276 0.298180 -5.148409
 0.005473 0.521212 -5.191269
 0.005392 0.824244 -5.173620
 0.005224 0.969696 -5.137064
 0.005015 1.083636 -5.091681
 0.004297 1.115152 -4.935367
 0.004013 1.037576 -4.873597
 0.003990 0.775756 -4.868555
 0.004645 0.768484 -5.011004
 0.004627 0.964848 -5.007220
 0.004506 1.052120 -4.980749
 0.004251 1.136968 -4.925281
 0.002948 0.756364 -4.641647
 0.001402 0.751516 -4.305066
 0.001402 0.530908 -4.305066
 0.002936 0.513940 -4.639126
 0.002902 0.741820 -4.631561
 0.028316 1.720844 -10.163318
 0.026283 1.718428 -9.720926
 0.026260 1.636252 -9.715899
 0.026595 1.653172 -9.788794
 0.026791 1.561328 -9.831523
 0.026791 1.534744 -9.831523
 0.026757 0.485800 -9.823983
 0.026884 0.345620 -9.851633
 0.027253 0.154684 -9.932068
 0.027617 0.074924 -10.011245
 0.028275 0.065256 -10.154519
 0.028835 0.166768 -10.276430
 0.029124 0.323868 -10.339269
 0.029095 0.497884 -10.332985
 0.028806 0.594560 -10.270146
 0.028454 0.560724 -10.193482
 0.028316 0.468884 -10.163318
 0.028396 0.352872 -10.180912
 0.028518 0.294864 -10.207306
 0.028350 0.171600 -10.170858
 0.028108 0.178852 -10.118074
 0.027854 0.195772 -10.062775
 0.027755 0.304532 -10.041409
 0.027727 1.539576 -10.035126
 0.027784 1.636252 -10.047693
 0.027992 1.667672 -10.092937
 0.028264 1.672508 -10.152007
 0.028281 1.728096 -10.155778
 0.025532 1.135952 -9.557543
 0.025157 1.208460 -9.475851
 0.024753 1.210876 -9.387875
 0.024291 1.148036 -9.287332
 0.023743 0.974020 -9.167937
 0.023592 0.737160 -9.135260
 0.023639 0.490636 -9.145315
 0.023846 0.323868 -9.190559
 0.024135 0.171600 -9.253399
 0.024470 0.113596 -9.326293
 0.024805 0.089424 -9.399186
 0.025209 0.118428 -9.487162
 0.025613 0.188520 -9.575139
 0.025896 0.323868 -9.636721
 0.026093 0.476132 -9.679453
 0.026133 0.676736 -9.688249
 0.025989 0.887008 -9.656829
 0.025798 1.012688 -9.615356
 0.025573 1.138368 -9.566341
 0.024863 1.119032 -9.411755
 0.024666 1.092448 -9.369024
 0.024493 1.027192 -9.331320
 0.024407 0.874924 -9.312469
 0.024424 0.456796 -9.316238
 0.024510 0.306948 -9.335091
 0.024626 0.203020 -9.360226
 0.024817 0.188520 -9.401701
 0.025065 0.219940 -9.455743
 0.025146 0.285196 -9.473338
 0.025203 0.386708 -9.485905
 0.025215 0.949848 -9.488420
 0.025163 1.041692 -9.477109
 0.025019 1.106948 -9.445689
 0.024834 1.128700 -9.405472
 0.023131 1.191540 -9.034717
 0.022155 1.179456 -8.822319
 0.022074 1.077944 -8.804724
 0.021693 1.189124 -8.721776
 0.021317 1.213292 -8.640084
 0.021029 1.177040 -8.577243
 0.020780 1.087612 -8.523201
 0.020642 0.957100 -8.493039
 0.020630 0.280364 -8.490524
 0.020532 0.178852 -8.469158
 0.020394 0.166768 -8.438997
 0.020359 0.094260 -8.431457
 0.021670 0.094260 -8.716748
 0.021681 0.161932 -8.719261
 0.021496 0.215104 -8.679044
 0.021462 0.304532 -8.671502
 0.021445 0.947432 -8.667733
 0.021572 1.019940 -8.695383
 0.021693 1.044108 -8.721776
 0.021854 1.022356 -8.756965
 0.022010 0.969184 -8.790898
 0.022120 0.884592 -8.814779
 0.022057 0.251360 -8.800953
 0.021935 0.154684 -8.774560
 0.021808 0.154684 -8.746910
 0.021826 0.101512 -8.750682
 0.023171 0.101512 -9.043513
 0.023182 0.140180 -9.046028
 0.022980 0.195772 -9.002041
 0.022911 0.253776 -8.986959
 0.022882 1.041692 -8.980675
 0.022900 1.114200 -8.984446
 0.023136 1.126284 -9.035973
 0.023148 1.184292 -9.038486
 1704
 0 1
 1 2
 2 3
 3 4
 4 5
 5 6
 6 7
 7 8
 8 9
 9 10
 10 11
 11 12
 12 13
 14 15
 15 16
 16 17
 17 18
 18 19
 19 20
 20 21
 21 22
 22 23
 23 24
 24 25
 25 26
 26 27
 27 28
 28 29
 29 30
 30 31
 31 32
 32 33
 33 34
 34 35
 35 36
 36 37
 37 38
 38 39
 39 40
 40 41
 41 42
 42 43
 43 44
 44 45
 45 46
 46 47
 47 48
 48 49
 49 50
 50 51
 51 52
 52 53
 53 54
 54 55
 55 56
 57 58
 58 59
 59 60
 60 61
 61 62
 62 63
 63 64
 64 65
 65 66
 66 67
 67 68
 68 69
 69 70
 70 71
 71 72
 72 73
 73 74
 74 75
 75 76
 77 78
 78 79
 79 80
 80 81
 81 82
 82 83
 83 84
 84 85
 85 86
 86 87
 87 88
 88 89
 89 90
 90 91
 91 92
 92 93
 93 94
 94 95
 95 96
 96 97
 97 98
 98 99
 99 100
 100 101
 101 102
 102 103
 103 104
 104 105
 105 106
 106 107
 107 108
 108 109
 109 110
 110 111
 111 112
 112 113
 113 114
 114 115
 115 116
 116 117
 117 118
 118 119
 119 120
 120 121
 121 122
 122 123
 123 124
 124 125
 126 127
 127 128
 128 129
 129 130
 130 131
 131 132
 132 133
 133 134
 134 135
 135 136
 136 137
 137 138
 138 139
 139 140
 140 141
 141 142
 142 143
 144 145
 145 146
 146 147
 147 148
 148 149
 149 150
 150 151
 151 152
 152 153
 153 154
 154 155
 155 156
 156 157
 157 158
 158 159
 159 160
 160 161
 161 162
 162 163
 163 164
 164 165
 165 166
 166 167
 167 168
 168 169
 169 170
 170 171
 171 172
 172 173
 173 174
 174 175
 175 176
 176 177
 177 178
 178 179
 179 180
 180 181
 181 182
 182 183
 183 184
 184 185
 185 186
 186 187
 187 188
 188 189
 189 190
 190 191
 191 192
 193 194
 194 195
 195 196
 196 197
 197 198
 198 199
 199 200
 200 201
 201 202
 202 203
 203 204
 204 205
 205 206
 206 207
 207 208
 208 209
 209 210
 210 211
 211 212
 212 213
 213 214
 214 215
 215 216
 217 218
 218 219
 219 220
 220 221
 221 222
 222 223
 223 224
 224 225
 225 226
 226 227
 227 228
 228 229
 229 230
 230 231
 231 232
 233 234
 234 235
 235 236
 236 237
 237 238
 238 239
 239 240
 240 241
 241 242
 242 243
 243 244
 245 246
 246 247
 247 248
 248 249
 249 250
 250 251
 251 252
 252 253
 253 254
 254 255
 255 256
 256 257
 257 258
 258 259
 259 260
 261 262
 262 263
 263 264
 264 265
 265 266
 266 267
 267 268
 268 269
 269 270
 270 271
 271 272
 272 273
 273 274
 274 275
 275 276
 276 277
 277 278
 278 279
 279 280
 280 281
 281 282
 282 283
 284 285
 285 286
 286 287
 287 288
 288 289
 289 290
 290 291
 291 292
 292 293
 293 294
 294 295
 295 296
 296 297
 297 298
 298 299
 299 300
 300 301
 301 302
 303 304
 304 305
 305 306
 306 307
 308 309
 309 310
 310 311
 311 312
 312 313
 313 314
 314 315
 315 316
 316 317
 317 318
 318 319
 319 320
 320 321
 322 323
 323 324
 324 325
 325 326
 326 327
 327 328
 328 329
 329 330
 330 331
 331 332
 332 333
 333 334
 334 335
 335 336
 336 337
 337 338
 338 339
 339 340
 340 341
 341 342
 342 343
 343 344
 344 345
 345 346
 346 347
 347 348
 348 349
 349 350
 350 351
 351 352
 353 354
 354 355
 355 356
 356 357
 357 358
 358 359
 359 360
 360 361
 361 362
 362 363
 363 364
 365 366
 366 367
 367 368
 368 369
 369 370
 370 371
 371 372
 372 373
 373 374
 374 375
 375 376
 376 377
 377 378
 378 379
 379 380
 380 381
 381 382
 382 383
 383 384
 384 385
 385 386
 386 387
 387 388
 388 389
 389 390
 390 391
 391 392
 392 393
 393 394
 394 395
 395 396
 396 397
 397 398
 398 399
 399 400
 400 401
 401 402
 402 403
 403 404
 404 405
 405 406
 407 408
 408 409
 409 410
 410 411
 411 412
 412 413
 413 414
 414 415
 415 416
 416 417
 417 418
 418 419
 419 420
 420 421
 421 422
 422 423
 423 424
 424 425
 425 426
 426 427
 427 428
 428 429
 430 431
 431 432
 432 433
 433 434
 434 435
 435 436
 436 437
 437 438
 438 439
 439 440
 440 441
 441 442
 442 443
 443 444
 444 445
 445 446
 446 447
 447 448
 448 449
 449 450
 450 451
 451 452
 452 453
 453 454
 454 455
 455 456
 456 457
 457 458
 458 459
 459 460
 460 461
 461 462
 462 463
 463 464
 464 465
 465 466
 466 467
 467 468
 468 469
 469 470
 470 471
 471 472
 472 473
 473 474
 474 475
 475 476
 476 477
 477 478
 478 479
 479 480
 480 481
 481 482
 482 483
 483 484
 484 485
 485 486
 486 487
 487 488
 488 489
 489 490
 490 491
 491 492
 492 493
 493 494
 494 495
 495 496
 496 497
 497 498
 498 499
 499 500
 500 501
 502 503
 503 504
 504 505
 505 506
 506 507
 507 508
 508 509
 509 510
 510 511
 511 512
 512 513
 513 514
 514 515
 515 516
 516 517
 517 518
 518 519
 519 520
 520 521
 521 522
 522 523
 523 524
 524 525
 525 526
 526 527
 527 528
 528 529
 529 530
 530 531
 531 532
 532 533
 533 534
 535 536
 536 537
 537 538
 538 539
 539 540
 540 541
 541 542
 542 543
 543 544
 545 546
 546 547
 547 548
 548 549
 549 550
 550 551
 551 552
 552 553
 553 554
 554 555
 555 556
 556 557
 557 558
 558 559
 559 560
 560 561
 561 562
 562 563
 563 564
 564 565
 565 566
 567 568
 568 569
 569 570
 570 571
 572 573
 573 574
 574 575
 575 576
 577 578
 578 579
 579 580
 580 581
 581 582
 582 583
 583 584
 584 585
 585 586
 586 587
 587 588
 588 589
 589 590
 590 591
 591 592
 592 593
 593 594
 594 595
 596 597
 597 598
 598 599
 599 600
 600 601
 601 602
 602 603
 603 604
 604 605
 605 606
 606 607
 607 608
 608 609
 609 610
 610 611
 611 612
 613 614
 614 615
 615 616
 616 617
 617 618
 618 619
 619 620
 620 621
 621 622
 622 623
 623 624
 624 625
 625 626
 626 627
 627 628
 628 629
 630 631
 631 632
 632 633
 633 634
 634 635
 635 636
 637 638
 638 639
 639 640
 640 641
 641 642
 642 643
 643 644
 644 645
 645 646
 646 647
 647 648
 648 649
 649 650
 650 651
 651 652
 652 653
 653 654
 654 655
 655 656
 656 657
 657 658
 658 659
 659 660
 660 661
 661 662
 662 663
 663 664
 664 665
 665 666
 666 667
 667 668
 668 669
 669 670
 670 671
 672 673
 673 674
 674 675
 675 676
 676 677
 677 678
 678 679
 679 680
 680 681
 681 682
 682 683
 683 684
 684 685
 685 686
 686 687
 687 688
 688 689
 690 691
 691 692
 692 693
 693 694
 694 695
 695 696
 696 697
 697 698
 698 699
 699 700
 700 701
 701 702
 702 703
 703 704
 704 705
 705 706
 706 707
 707 708
 709 710
 710 711
 711 712
 712 713
 713 714
 714 715
 715 716
 716 717
 717 718
 718 719
 719 720
 720 721
 721 722
 722 723
 723 724
 724 725
 725 726
 726 727
 727 728
 729 730
 730 731
 731 732
 732 733
 733 734
 734 735
 735 736
 736 737
 737 738
 738 739
 739 740
 740 741
 741 742
 742 743
 743 744
 744 745
 746 747
 747 748
 748 749
 749 750
 750 751
 751 752
 752 753
 753 754
 754 755
 755 756
 757 758
 758 759
 759 760
 760 761
 761 762
 762 763
 763 764
 764 765
 765 766
 766 767
 767 768
 768 769
 770 771
 771 772
 772 773
 773 774
 774 775
 775 776
 776 777
 777 778
 778 779
 779 780
 780 781
 781 782
 783 784
 784 785
 785 786
 786 787
 787 788
 788 789
 789 790
 791 792
 792 793
 793 794
 794 795
 795 796
 796 797
 797 798
 798 799
 799 800
 800 801
 801 802
 802 803
 803 804
 804 805
 805 806
 806 807
 807 808
 808 809
 809 810
 810 811
 811 812
 813 814
 814 815
 815 816
 816 817
 817 818
 819 820
 820 821
 821 822
 822 823
 823 824
 824 825
 825 826
 826 827
 827 828
 828 829
 829 830
 830 831
 832 833
 833 834
 834 835
 835 836
 836 837
 837 838
 838 839
 839 840
 840 841
 841 842
 842 843
 843 844
 844 845
 845 846
 846 847
 847 848
 848 849
 849 850
 850 851
 851 852
 852 853
 853 854
 854 855
 855 856
 856 857
 857 858
 858 859
 859 860
 860 861
 861 862
 862 863
 863 864
 864 865
 866 867
 867 868
 868 869
 869 870
 870 871
 871 872
 872 873
 873 874
 874 875
 875 876
 876 877
 877 878
 878 879
 879 880
 880 881
 881 882
 883 884
 884 885
 885 886
 886 887
 887 888
 888 889
 889 890
 890 891
 891 892
 892 893
 893 894
 894 895
 895 896
 896 897
 897 898
 898 899
 899 900
 900 901
 901 902
 903 904
 904 905
 905 906
 906 907
 907 908
 909 910
 910 911
 911 912
 912 913
 913 914
 914 915
 915 916
 916 917
 917 918
 918 919
 919 920
 920 921
 921 922
 922 923
 923 924
 924 925
 925 926
 926 927
 927 928
 928 929
 929 930
 930 931
 932 933
 933 934
 934 935
 935 936
 936 937
 937 938
 938 939
 939 940
 940 941
 941 942
 942 943
 943 944
 944 945
 945 946
 946 947
 947 948
 948 949
 950 951
 951 952
 952 953
 953 954
 955 956
 956 957
 957 958
 958 959
 960 961
 961 962
 962 963
 963 964
 964 965
 965 966
 966 967
 968 969
 969 970
 970 971
 971 972
 972 973
 973 974
 974 975
 975 976
 976 977
 977 978
 978 979
 979 980
 980 981
 981 982
 982 983
 983 984
 984 985
 985 986
 986 987
 988 989
 989 990
 990 991
 991 992
 992 993
 994 995
 995 996
 996 997
 997 998
 998 999
 999 1000
 1000 1001
 1001 1002
 1002 1003
 1003 1004
 1004 1005
 1005 1006
 1006 1007
 1007 1008
 1009 1010
 1010 1011
 1011 1012
 1012 1013
 1013 1014
 1014 1015
 1015 1016
 1017 1018
 1018 1019
 1019 1020
 1020 1021
 1021 1022
 1022 1023
 1023 1024
 1024 1025
 1025 1026
 1026 1027
 1027 1028
 1028 1029
 1029 1030
 1030 1031
 1032 1033
 1033 1034
 1034 1035
 1035 1036
 1036 1037
 1037 1038
 1038 1039
 1039 1040
 1040 1041
 1041 1042
 1042 1043
 1043 1044
 1044 1045
 1045 1046
 1046 1047
 1047 1048
 1048 1049
 1049 1050
 1050 1051
 1052 1053
 1053 1054
 1054 1055
 1055 1056
 1056 1057
 1057 1058
 1058 1059
 1059 1060
 1060 1061
 1061 1062
 1062 1063
 1063 1064
 1064 1065
 1065 1066
 1066 1067
 1068 1069
 1069 1070
 1070 1071
 1071 1072
 1073 1074
 1074 1075
 1075 1076
 1076 1077
 1077 1078
 1078 1079
 1079 1080
 1080 1081
 1081 1082
 1082 1083
 1083 1084
 1084 1085
 1086 1087
 1087 1088
 1088 1089
 1089 1090
 1090 1091
 1091 1092
 1092 1093
 1093 1094
 1094 1095
 1095 1096
 1096 1097
 1097 1098
 1098 1099
 1099 1100
 1100 1101
 1101 1102
 1102 1103
 1103 1104
 1104 1105
 1105 1106
 1106 1107
 1107 1108
 1108 1109
 1109 1110
 1110 1111
 1111 1112
 1112 1113
 1114 1115
 1115 1116
 1116 1117
 1117 1118
 1118 1119
 1119 1120
 1120 1121
 1121 1122
 1123 1124
 1124 1125
 1125 1126
 1126 1127
 1127 1128
 1128 1129
 1129 1130
 1130 1131
 1131 1132
 1132 1133
 1133 1134
 1134 1135
 1135 1136
 1136 1137
 1137 1138
 1138 1139
 1139 1140
 1140 1141
 1141 1142
 1142 1143
 1143 1144
 1144 1145
 1145 1146
 1146 1147
 1147 1148
 1148 1149
 1149 1150
 1150 1151
 1151 1152
 1152 1153
 1153 1154
 1154 1155
 1155 1156
 1156 1157
 1158 1159
 1159 1160
 1160 1161
 1161 1162
 1162 1163
 1163 1164
 1164 1165
 1165 1166
 1166 1167
 1167 1168
 1168 1169
 1169 1170
 1170 1171
 1171 1172
 1172 1173
 1173 1174
 1174 1175
 1175 1176
 1176 1177
 1177 1178
 1178 1179
 1179 1180
 1180 1181
 1182 1183
 1183 1184
 1184 1185
 1185 1186
 1187 1188
 1188 1189
 1189 1190
 1190 1191
 1192 1193
 1193 1194
 1194 1195
 1195 1196
 1196 1197
 1197 1198
 1198 1199
 1199 1200
 1200 1201
 1201 1202
 1202 1203
 1203 1204
 1204 1205
 1205 1206
 1206 1207
 1207 1208
 1208 1209
 1209 1210
 1210 1211
 1212 1213
 1213 1214
 1214 1215
 1215 1216
 1216 1217
 1217 1218
 1218 1219
 1219 1220
 1220 1221
 1221 1222
 1222 1223
 1223 1224
 1224 1225
 1225 1226
 1226 1227
 1228 1229
 1229 1230
 1230 1231
 1231 1232
 1232 1233
 1233 1234
 1234 1235
 1235 1236
 1236 1237
 1237 1238
 1238 1239
 1239 1240
 1240 1241
 1241 1242
 1242 1243
 1243 1244
 1244 1245
 1245 1246
 1246 1247
 1247 1248
 1249 1250
 1250 1251
 1251 1252
 1252 1253
 1253 1254
 1254 1255
 1255 1256
 1256 1257
 1257 1258
 1258 1259
 1259 1260
 1260 1261
 1261 1262
 1262 1263
 1263 1264
 1264 1265
 1265 1266
 1266 1267
 1267 1268
 1268 1269
 1269 1270
 1270 1271
 1271 1272
 1272 1273
 1273 1274
 1275 1276
 1276 1277
 1277 1278
 1278 1279
 1279 1280
 1280 1281
 1281 1282
 1282 1283
 1283 1284
 1284 1285
 1286 1287
 1287 1288
 1288 1289
 1289 1290
 1290 1291
 1291 1292
 1292 1293
 1293 1294
 1294 1295
 1295 1296
 1296 1297
 1297 1298
 1298 1299
 1299 1300
 1300 1301
 1301 1302
 1302 1303
 1303 1304
 1304 1305
 1305 1306
 1306 1307
 1307 1308
 1308 1309
 1309 1310
 1310 1311
 1311 1312
 1312 1313
 1313 1314
 1314 1315
 1315 1316
 1316 1317
 1317 1318
 1318 1319
 1319 1320
 1320 1321
 1321 1322
 1322 1323
 1323 1324
 1324 1325
 1325 1326
 1326 1327
 1327 1328
 1328 1329
 1329 1330
 1330 1331
 1331 1332
 1332 1333
 1333 1334
 1334 1335
 1335 1336
 1337 1338
 1338 1339
 1339 1340
 1340 1341
 1341 1342
 1342 1343
 1343 1344
 1344 1345
 1345 1346
 1347 1348
 1348 1349
 1349 1350
 1351 1352
 1352 1353
 1353 1354
 1354 1355
 1355 1356
 1356 1357
 1357 1358
 1358 1359
 1359 1360
 1360 1361
 1361 1362
 1362 1363
 1363 1364
 1364 1365
 1365 1366
 1366 1367
 1367 1368
 1368 1369
 1369 1370
 1370 1371
 1371 1372
 1372 1373
 1373 1374
 1374 1375
 1375 1376
 1376 1377
 1377 1378
 1378 1379
 1379 1380
 1380 1381
 1382 1383
 1383 1384
 1384 1385
 1385 1386
 1386 1387
 1387 1388
 1388 1389
 1389 1390
 1390 1391
 1392 1393
 1393 1394
 1394 1395
 1395 1396
 1396 1397
 1397 1398
 1398 1399
 1399 1400
 1400 1401
 1401 1402
 1402 1403
 1403 1404
 1405 1406
 1406 1407
 1407 1408
 1408 1409
 1409 1410
 1410 1411
 1411 1412
 1412 1413
 1413 1414
 1414 1415
 1416 1417
 1417 1418
 1418 1419
 1419 1420
 1420 1421
 1421 1422
 1422 1423
 1423 1424
 1424 1425
 1425 1426
 1426 1427
 1427 1428
 1428 1429
 1429 1430
 1430 1431
 1431 1432
 1432 1433
 1433 1434
 1434 1435
 1435 1436
 1436 1437
 1437 1438
 1438 1439
 1439 1440
 1440 1441
 1441 1442
 1442 1443
 1443 1444
 1444 1445
 1445 1446
 1446 1447
 1447 1448
 1448 1449
 1449 1450
 1450 1451
 1451 1452
 1452 1453
 1453 1454
 1455 1456
 1456 1457
 1457 1458
 1458 1459
 1459 1460
 1460 1461
 1461 1462
 1462 1463
 1463 1464
 1464 1465
 1465 1466
 1466 1467
 1467 1468
 1468 1469
 1469 1470
 1470 1471
 1471 1472
 1472 1473
 1473 1474
 1474 1475
 1476 1477
 1477 1478
 1478 1479
 1479 1480
 1480 1481
 1481 1482
 1482 1483
 1483 1484
 1484 1485
 1485 1486
 1486 1487
 1487 1488
 1488 1489
 1489 1490
 1491 1492
 1492 1493
 1493 1494
 1494 1495
 1495 1496
 1496 1497
 1497 1498
 1498 1499
 1499 1500
 1500 1501
 1501 1502
 1502 1503
 1503 1504
 1504 1505
 1505 1506
 1506 1507
 1507 1508
 1508 1509
 1509 1510
 1510 1511
 1511 1512
 1512 1513
 1513 1514
 1514 1515
 1515 1516
 1516 1517
 1517 1518
 1518 1519
 1519 1520
 1521 1522
 1522 1523
 1523 1524
 1524 1525
 1525 1526
 1526 1527
 1527 1528
 1528 1529
 1529 1530
 1530 1531
 1531 1532
 1532 1533
 1533 1534
 1534 1535
 1535 1536
 1536 1537
 1537 1538
 1538 1539
 1539 1540
 1540 1541
 1541 1542
 1542 1543
 1543 1544
 1545 1546
 1546 1547
 1547 1548
 1548 1549
 1549 1550
 1550 1551
 1551 1552
 1552 1553
 1554 1555
 1555 1556
 1556 1557
 1557 1558
 1558 1559
 1559 1560
 1560 1561
 1561 1562
 1562 1563
 1564 1565
 1565 1566
 1566 1567
 1567 1568
 1568 1569
 1569 1570
 1570 1571
 1571 1572
 1572 1573
 1573 1574
 1574 1575
 1576 1577
 1577 1578
 1578 1579
 1579 1580
 1580 1581
 1581 1582
 1582 1583
 1583 1584
 1584 1585
 1585 1586
 1586 1587
 1587 1588
 1589 1590
 1590 1591
 1591 1592
 1592 1593
 1593 1594
 1594 1595
 1595 1596
 1596 1597
 1597 1598
 1598 1599
 1599 1600
 1600 1601
 1601 1602
 1602 1603
 1603 1604
 1604 1605
 1605 1606
 1606 1607
 1607 1608
 1608 1609
 1609 1610
 1610 1611
 1612 1613
 1613 1614
 1614 1615
 1615 1616
 1616 1617
 1617 1618
 1618 1619
 1620 1621
 1621 1622
 1622 1623
 1623 1624
 1624 1625
 1625 1626
 1626 1627
 1627 1628
 1628 1629
 1629 1630
 1630 1631
 1631 1632
 1632 1633
 1633 1634
 1634 1635
 1635 1636
 1636 1637
 1637 1638
 1638 1639
 1639 1640
 1640 1641
 1641 1642
 1642 1643
 1643 1644
 1644 1645
 1646 1647
 1647 1648
 1648 1649
 1649 1650
 1650 1651
 1651 1652
 1652 1653
 1653 1654
 1654 1655
 1655 1656
 1656 1657
 1657 1658
 1658 1659
 1659 1660
 1660 1661
 1661 1662
 1662 1663
 1663 1664
 1664 1665
 1665 1666
 1666 1667
 1667 1668
 1668 1669
 1669 1670
 1670 1671
 1672 1673
 1673 1674
 1674 1675
 1675 1676
 1676 1677
 1677 1678
 1678 1679
 1679 1680
 1680 1681
 1681 1682
 1682 1683
 1683 1684
 1684 1685
 1685 1686
 1686 1687
 1687 1688
 1688 1689
 1689 1690
 1690 1691
 1692 1693
 1693 1694
 1694 1695
 1695 1696
 1696 1697
 1697 1698
 1699 1700
 1700 1701
 1701 1702
 1702 1703
 1704 1705
 1705 1706
 1706 1707
 1707 1708
 1708 1709
 1709 1710
 1710 1711
 1711 1712
 1712 1713
 1713 1714
 1714 1715
 1715 1716
 1716 1717
 1717 1718
 1718 1719
 1719 1720
 1720 1721
 1721 1722
 1722 1723
 1723 1724
 1724 1725
 1725 1726
 1726 1727
 1727 1728
 1728 1729
 1729 1730
 1730 1731
 1732 1733
 1733 1734
 1734 1735
 1735 1736
 1736 1737
 1737 1738
 1738 1739
 1739 1740
 1740 1741
 1741 1742
 1742 1743
 1743 1744
 1744 1745
 1745 1746
 1746 1747
 1747 1748
 1748 1749
 1749 1750
 1751 1752
 1752 1753
 1753 1754
 1754 1755
 1755 1756
 1756 1757
 1757 1758
 1758 1759
 1759 1760
 1760 1761
 1761 1762
 1762 1763
 1763 1764
 1764 1765
 1766 1767
 1767 1768
 1768 1769
 1769 1770
 1770 1771
 1771 1772
 1772 1773
 1773 1774
 1774 1775
 1775 1776
 1776 1777
 1777 1778
 1778 1779
 1779 1780
 1780 1781
 1781 1782
 1782 1783
 1783 1784
 1784 1785
 1785 1786
 1786 1787
 1787 1788
 1788 1789
 1789 1790
 1790 1791
 1791 1792
 1792 1793
 1793 1794
 1794 1795
 1795 1796
 1796 1797
 1797 1798
 1798 1799
 